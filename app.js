
```javascript
// === app.js === (REGENERATED - COMPLETE - CORRECTED sfUpdateDashboard)

import { bdsmData } from './data.js';
import { getStyleBreakdown as getSubBreakdown } from './paraphrasing_sub.js';
import { getStyleBreakdown as getDomBreakdown } from './paraphrasing_dom.js';
import { glossaryTerms } from './glossary.js';
import { getRandomPrompt } from './prompts.js';
import { achievementList, hasAchievement, grantAchievement } from './achievements.js';

// Chart.js and Confetti loaded via CDN

class TrackerApp {
  constructor() {
    console.log("CONSTRUCTOR: Starting KinkCompass App...");
    this.people = [];
    this.previewPerson = null;
    this.currentEditId = null;
    this.chartInstance = null;
    this.notificationTimer = null; // Timer for notifications

    // --- Style Finder State ---
    this.sfActive = false;
    this.sfStep = 0;
    this.sfRole = null;
    this.sfAnswers = { traits: {} };
    this.sfScores = {};
    this.sfPreviousScores = {};
    this.sfHasRenderedDashboard = false;
    this.sfTraitSet = [];
    this.sfSteps = [];

    // --- Style Finder Data Structures ---
    this.sfStyles = {
      submissive: [ 'Classic Submissive', 'Brat', 'Slave', 'Pet', 'Little', 'Puppy', 'Kitten', 'Princess', 'Rope Bunny', 'Masochist', 'Prey', 'Toy', 'Doll', 'Bunny', 'Servant', 'Playmate', 'Babygirl', 'Captive', 'Thrall', 'Puppet', 'Maid', 'Painslut', 'Bottom' ],
      dominant: [ 'Classic Dominant', 'Assertive', 'Nurturer', 'Strict', 'Master', 'Mistress', 'Daddy', 'Mommy', 'Owner', 'Rigger', 'Sadist', 'Hunter', 'Trainer', 'Puppeteer', 'Protector', 'Disciplinarian', 'Caretaker', 'Sir', 'Goddess', 'Commander' ]
    };
    this.sfSubFinderTraits = [
      { name: 'obedience', desc: 'How much do you enjoy following instructions or rules given by someone you trust?' }, { name: 'rebellion', desc: 'Do you find it fun to playfully resist or tease when someone tries to guide you?' }, { name: 'service', desc: 'Does it feel rewarding to assist or do tasks that make someone else happy?' }, { name: 'playfulness', desc: 'How much do you love engaging in silly games or lighthearted mischief?' }, { name: 'sensuality', desc: 'Do soft touches, textures, or physical sensations light up your senses?' }, { name: 'exploration', desc: 'Are you excited by the idea of trying new experiences or stepping into the unknown?' }, { name: 'devotion', desc: 'Does being deeply loyal and committed to someone bring you a sense of fulfillment?' }, { name: 'innocence', desc: 'Do you enjoy feeling carefree, pure, or even a bit childlike in your interactions?' }, { name: 'mischief', desc: 'How much do you like stirring things up with a cheeky prank or playful trouble?' }, { name: 'affection', desc: 'Do you crave physical closeness, like hugs or cuddles, to feel connected?' }, { name: 'painTolerance', desc: 'Does a little sting or discomfort excite you, or do you prefer to avoid it?' }, { name: 'submissionDepth', desc: 'How much do you enjoy letting go completely and giving someone full control?' }, { name: 'dependence', desc: 'Do you feel comforted and secure when you can rely on someone else to guide you?' }, { name: 'vulnerability', desc: 'Does opening up emotionally and being exposed feel natural and right to you?' }, { name: 'adaptability', desc: 'How easily can you switch between different roles or adjust to new expectations?' }, { name: 'tidiness', desc: 'Do you take pride in keeping things neat, clean, and perfectly organized for someone?' }, { name: 'politeness', desc: 'Does being courteous and respectful in your actions come naturally to you?' }, { name: 'craving', desc: 'Do you actively seek out intense sensations or experiences that push your limits?' }, { name: 'receptiveness', desc: 'How open are you to receiving direction, sensations, or guidance from someone else?' }
    ];
    this.sfSubTraitFootnotes = { obedience: "1: Rarely follows / 10: Always obeys", rebellion: "1: Very compliant / 10: Loves to resist", service: "1: Self-focused / 10: Service-driven", playfulness: "1: Serious / 10: Super playful", sensuality: "1: Not sensory / 10: Highly sensual", exploration: "1: Stays safe / 10: Seeks adventure", devotion: "1: Independent / 10: Deeply devoted", innocence: "1: Mature / 10: Very innocent", mischief: "1: Calm / 10: Mischievous", affection: "1: Distant / 10: Super affectionate", painTolerance: "1: Avoids pain / 10: Loves pain", submissionDepth: "1: Light submission / 10: Total surrender", dependence: "1: Self-reliant / 10: Loves guidance", vulnerability: "1: Guarded / 10: Fully open", adaptability: "1: Fixed role / 10: Very versatile", tidiness: "1: Messy and carefree / 10: Obsessed with order", politeness: "1: Casual and blunt / 10: Always courteous", craving: "1: Avoids intensity / 10: Seeks extreme thrills", receptiveness: "1: Closed off / 10: Fully open to input" };
    this.sfDomFinderTraits = [
      { name: 'authority', desc: 'Do you feel strong when you take charge?' }, { name: 'confidence', desc: 'Are you sure of your decisions?' }, { name: 'discipline', desc: 'Do you enjoy setting firm rules?' }, { name: 'boldness', desc: 'Do you dive into challenges fearlessly?' }, { name: 'care', desc: 'Do you love supporting and protecting others?' }, { name: 'empathy', desc: 'Do you tune into others’ feelings easily?' }, { name: 'control', desc: 'Do you thrive on directing every detail?' }, { name: 'creativity', desc: 'Do you enjoy crafting unique scenes?' }, { name: 'precision', desc: 'Are you careful with every step you take?' }, { name: 'intensity', desc: 'Do you bring fierce energy to what you do?' }, { name: 'sadism', desc: 'Does giving a little pain excite you?' }, { name: 'leadership', desc: 'Do you naturally guide others forward?' }, { name: 'possession', desc: 'Do you feel pride in owning what’s yours?' }, { name: 'patience', desc: 'Are you calm while teaching or training?' }, { name: 'dominanceDepth', desc: 'Do you crave total power in a scene?' }
    ];
    this.sfDomTraitFootnotes = { authority: "1: Gentle / 10: Very commanding", confidence: "1: Hesitant / 10: Rock-solid", discipline: "1: Relaxed / 10: Strict", boldness: "1: Cautious / 10: Fearless", care: "1: Detached / 10: Deeply caring", empathy: "1: Distant / 10: Highly intuitive", control: "1: Hands-off / 10: Total control", creativity: "1: Routine / 10: Very creative", precision: "1: Casual / 10: Meticulous", intensity: "1: Soft / 10: Intense", sadism: "1: Avoids pain / 10: Enjoys giving pain", leadership: "1: Follower / 10: Natural leader", possession: "1: Shares / 10: Very possessive", patience: "1: Impatient / 10: Very patient", dominanceDepth: "1: Light control / 10: Full dominance" };
    this.sfSliderDescriptions = {
      obedience: [ "You dodge orders like a breeze!", "Rules? You’re too free for that!", "You’ll follow if it’s fun!", "A little “yes” slips out sometimes!", "You’re cool with gentle guidance!", "Following feels kinda nice!", "You like pleasing when asked!", "Obeying’s your quiet joy!", "You love a sweet “please”!", "You glow when you say “yes”!" ],
      rebellion: [ "You’re too sweet to say no!", "A tiny “nah” sneaks out!", "You nudge rules with a smile!", "Teasing’s your little game!", "Half yes, half no—cute!", "You push back with charm!", "Defiance is your sparkle!", "You love a playful “no”!", "Rebel vibes all the way!", "You’re a cheeky star!" ],
      service: [ "Helping? You’re too chill!", "A quick favor’s enough!", "You help if they’re sweet!", "You pitch in when it’s easy!", "Serving’s okay sometimes!", "You like making them smile!", "Helping’s your happy place!", "You love a kind task!", "You’re a service sweetie!", "Caring’s your superpower!" ],
      playfulness: [ "Serious is your vibe!", "A giggle slips out!", "You play if it’s light!", "Half serious, half silly!", "You’re warming up to fun!", "Playtime’s your joy!", "You bounce with glee!", "Silly’s your middle name!", "You’re a playful whirlwind!", "Games are your world!" ],
      sensuality: [ "Touch? Not your thing!", "A soft pat’s okay!", "You like a little feel!", "Textures are kinda neat!", "You’re into soft vibes!", "Silk makes you happy!", "You love a sensory tickle!", "Touch is your bliss!", "You’re all about feels!", "Sensory queen!" ],
      exploration: [ "Safe is your spot!", "A tiny step out—shy!", "You peek at new stuff!", "You’ll try if it’s safe!", "Half cozy, half curious!", "New things excite you!", "You chase the unknown!", "Adventure’s your jam!", "You’re a bold explorer!", "Nothing stops you!" ],
      devotion: [ "Free and solo!", "A bit of heart shows!", "You care if they’re near!", "Half free, half true!", "You’re warming up!", "Devotion’s your glow!", "You’re all in soft!", "Loyalty’s your core!", "You’re a devotion gem!", "Total soulmate!" ],
      innocence: [ "Wise beyond your years!", "A bit of wonder peeks out!", "You’re half grown, half kid!", "Silly feels nice sometimes!", "You’re dipping into cute!", "Innocence is your vibe!", "You’re a sweet dreamer!", "Giggles are your song!", "You’re pure sunshine!", "Total kid at heart!" ],
      mischief: [ "Too good for tricks!", "A tiny prank slips!", "You stir if it’s safe!", "Half calm, half cheeky!", "You’re a sneaky spark!", "Mischief’s your game!", "You love a little chaos!", "Trouble’s your friend!", "You’re a mischief pro!", "Chaos queen!" ],
      affection: [ "Hugs? Not really!", "A quick cuddle’s fine!", "You like a soft touch!", "Half aloof, half warm!", "You’re into snuggles!", "Cuddles are your joy!", "You love closeness!", "Affection’s your glow!", "You’re a hug star!", "Total love bug!" ],
      painTolerance: [ "You tire out quick!", "A little push is enough!", "You last if it’s fun!", "You’re steady for a bit!", "Halfway there—nice!", "You keep going strong!", "Endurance is your thing!", "You’re tough and ready!", "You never stop—wow!", "Marathon champ!" ],
      submissionDepth: [ "You’re free as a bird!", "A little give peeks out!", "You bend if it’s chill!", "Half you, half them!", "You’re easing in!", "Surrender’s kinda fun!", "You dive in soft!", "Control’s theirs—yay!", "You’re all theirs!", "Total trust star!" ],
      dependence: [ "Solo’s your jam!", "A lean slips in!", "You lean if they’re nice!", "Half free, half clingy!", "You’re okay with help!", "Relying feels good!", "You love their lead!", "They’re your rock!", "You’re a lean-in pro!", "Total trust buddy!" ],
      vulnerability: [ "Walls up high!", "A peek slips out!", "You share if safe!", "Half guarded, half open!", "You’re softening up!", "Open’s your vibe!", "You bare it soft!", "Heart’s wide open!", "You’re a trust gem!", "Total soul sharer!" ],
      adaptability: [ "One way—you’re set!", "A tiny switch is fine!", "You bend a little!", "Half fixed, half fluid!", "You’re okay with change!", "Switching’s easy!", "You roll with it!", "Flex is your strength!", "You flip like a pro!", "Total chameleon!" ],
      tidiness: [ "Chaos is your friend!", "A little mess is fine!", "You tidy if asked nicely!", "Order’s okay sometimes!", "You like things neat-ish!", "Cleanliness feels good!", "You love a tidy space!", "Order is your joy!", "Spotless is your vibe!", "Perfection in every corner!" ],
      politeness: [ "You’re blunt and bold!", "A bit gruff but sweet!", "Polite if it’s easy!", "You’re nice when needed!", "Courtesy’s your thing!", "You’re a polite gem!", "Manners shine bright!", "Respect is your core!", "You’re super courteous!", "Politeness queen!" ],
      craving: [ "Calm is your zone!", "A tiny thrill is enough!", "You dip into intensity!", "Half chill, half wild!", "You like a strong spark!", "Intensity calls you!", "You chase the edge!", "Thrills are your fuel!", "You crave the extreme!", "Limitless seeker!" ],
      receptiveness: [ "You’re your own guide!", "A bit open if safe!", "You listen if it’s clear!", "Half closed, half open!", "You’re warming up!", "Openness feels right!", "You take it all in!", "Guidance is welcome!", "You’re a receiver pro!", "Totally in tune!" ],
      authority: [ "Soft and shy!", "A little lead peeks!", "You guide if asked!", "Half gentle, half firm!", "You’re stepping up!", "Authority’s your vibe!", "You lead with ease!", "You’re a strong guide!", "Boss mode on!", "Total commander!" ],
      confidence: [ "Quiet and unsure!", "A bit of bold shows!", "You’re sure if it’s easy!", "Half shy, half steady!", "You’re growing bold!", "Confidence shines!", "You trust your gut!", "You’re rock solid!", "Bold and bright!", "Total powerhouse!" ],
      discipline: [ "Free and wild!", "A rule slips in!", "You set soft lines!", "Half loose, half tight!", "You’re liking order!", "Discipline’s your jam!", "You keep it firm!", "Rules are your strength!", "You’re super strict!", "Total control!" ],
      boldness: [ "Careful and calm!", "A risk peeks out!", "You leap if safe!", "Half shy, half daring!", "You’re getting brave!", "Boldness is you!", "You dive right in!", "Fearless vibes!", "You’re a bold star!", "Total daredevil!" ],
      care: [ "Cool and aloof!", "A care slips out!", "You help if asked!", "Half chill, half warm!", "You’re a soft guide!", "Nurturing’s your glow!", "You protect with love!", "Care is your core!", "You’re a warm star!", "Total nurturer!" ],
      empathy: [ "Distant and chill!", "A feel peeks out!", "You get it if clear!", "Half aloof, half tuned!", "You’re sensing more!", "Empathy’s your gift!", "You feel it all!", "You’re in sync!", "You’re a heart reader!", "Total intuitive!" ],
      control: [ "Free and open!", "A claim slips out!", "You hold if sweet!", "Half share, half mine!", "You’re liking it!", "Control’s your vibe!", "You claim with pride!", "Yours is yours!", "You’re a keeper!", "Total owner!" ],
      creativity: [ "Simple’s your way!", "A spark pops up!", "You craft if quick!", "Half plain, half wild!", "You’re sparking up!", "Creativity flows!", "You make magic!", "Ideas are your joy!", "You’re a vision star!", "Total creator!" ],
      precision: [ "Loose and free!", "A bit neat’s fine!", "You care if fast!", "Half sloppy, half sharp!", "You’re getting exact!", "Precision’s your thing!", "You nail it all!", "Every step’s perfect!", "You’re a detail whiz!", "Total master!" ],
      intensity: [ "Soft and mellow!", "A flare sneaks out!", "You heat if safe!", "Half calm, half fierce!", "You’re turning up!", "Intensity’s your spark!", "You bring the blaze!", "Fierce is your vibe!", "You’re a fire star!", "Total storm!" ],
      sadism: [ "Soft and sweet!", "A tease slips in!", "You push a little!", "Half gentle, half wild!", "You’re testing it!", "Pain’s your play!", "You love the sting!", "Thrill’s your game!", "You’re a spicy star!", "Total edge master!" ],
      leadership: [ "Soft and shy!", "A lead peeks out!", "You guide if asked!", "Half gentle, half firm!", "You’re stepping up!", "Leading’s your vibe!", "You steer with ease!", "You’re a bold guide!", "Leader mode on!", "Total captain!" ],
      possession: [ "Free and open!", "A claim slips out!", "You hold if sweet!", "Half share, half mine!", "You’re liking it!", "Possession’s your vibe!", "You claim with pride!", "Yours is yours!", "You’re a keeper!", "Total owner!" ],
      patience: [ "Fast and now!", "A wait slips in!", "You chill if quick!", "Half rush, half calm!", "You’re cooling down!", "Patience is you!", "You wait with grace!", "Calm’s your strength!", "You’re a zen star!", "Total peace!" ],
      dominanceDepth: [ "Light and free!", "A hold peeks out!", "You lead if easy!", "Half soft, half firm!", "You’re taking charge!", "Power’s your glow!", "You rule with ease!", "Control’s your core!", "You’re a power gem!", "Total ruler!" ]
    };
    this.sfTraitExplanations = {
      obedience: "How much you enjoy following instructions or rules. High = loves obeying; Low = prefers independence.", rebellion: "How much you like playfully resisting or teasing. High = loves defiance; Low = compliant.", service: "Joy derived from helping or performing tasks for others. High = service-driven; Low = self-focused.", playfulness: "Love for silly games, humor, and lightheartedness. High = very playful; Low = serious.", sensuality: "Appreciation for physical sensations, textures, touch. High = very sensory; Low = less focused on touch.", exploration: "Eagerness to try new experiences or push boundaries. High = adventurous; Low = prefers familiarity.", devotion: "Depth of loyalty and commitment to a partner. High = deeply devoted; Low = more independent.", innocence: "Enjoyment of feeling carefree, childlike, or pure. High = embraces innocence; Low = more mature.", mischief: "Enjoyment of stirring things up, pranks, or playful trouble. High = loves mischief; Low = calm.", affection: "Need for physical closeness, cuddles, and reassurance. High = very affectionate; Low = prefers space.", painTolerance: "How you perceive and react to physical discomfort or pain. High = finds interest/pleasure; Low = avoids pain.", submissionDepth: "Willingness to yield control to a partner. High = enjoys total surrender; Low = prefers light guidance.", dependence: "Comfort level in relying on a partner for guidance or decisions. High = enjoys dependence; Low = self-reliant.", vulnerability: "Ease and willingness to show emotional softness or weakness. High = very open; Low = guarded.", adaptability: "Ability to switch between roles or adjust to changing dynamics. High = very flexible; Low = prefers consistency.", tidiness: "Satisfaction derived from neatness and order. High = very tidy; Low = comfortable with mess.", politeness: "Natural inclination towards courteous and respectful behavior. High = very polite; Low = more direct/casual.", craving: "Desire for intense, extreme, or peak sensations/experiences. High = seeks intensity; Low = prefers calm.", receptiveness: "Openness to receiving direction, input, or sensation. High = very receptive; Low = more closed off.", authority: "Natural inclination and comfort in taking charge or leading. High = commanding; Low = prefers following.", confidence: "Self-assuredness in decisions and actions within a dynamic. High = very confident; Low = hesitant.", discipline: "Enjoyment in setting and enforcing rules or structure. High = strict; Low = relaxed.", boldness: "Willingness to take risks or face challenges head-on. High = fearless; Low = cautious.", care: "Focus on supporting, protecting, and nurturing a partner. High = deeply caring; Low = more detached.", empathy: "Ability to understand and connect with a partner's feelings. High = very empathetic; Low = more analytical.", control: "Desire to manage details, actions, or the environment. High = loves control; Low = prefers flow.", creativity: "Enjoyment in crafting unique scenarios, tasks, or experiences. High = very inventive; Low = prefers routine.", precision: "Focus on executing actions or commands meticulously. High = very precise; Low = more casual.", intensity: "The level of emotional or physical energy brought to the dynamic. High = very intense; Low = gentle.", sadism: "Deriving pleasure from consensually inflicting pain or discomfort. High = enjoys inflicting; Low = avoids inflicting.", leadership: "Natural ability to guide, direct, and inspire others. High = strong leader; Low = follower.", possession: "Feeling of ownership or strong connection ('mine') towards a partner. High = very possessive; Low = less possessive.", patience: "Ability to remain calm while guiding, teaching, or waiting. High = very patient; Low = impatient.", dominanceDepth: "Desire for the level of influence or control over a partner. High = seeks total influence; Low = prefers light control."
    };
    this.sfStyleDescriptions = {
      'Classic Submissive': { short: "Thrives on guidance and trust.", long: "Finds joy in yielding to a partner's direction, embracing vulnerability and structure.", tips: ["Communicate limits clearly.", "Find a respectful partner.", "Explore submission levels."] },
      Brat: { short: "Cheeky, loves playful resistance.", long: "Delights in witty defiance and earning 'consequences' through charm.", tips: ["Keep it fun.", "Partner needs humor.", "Define hard limits."] },
      Slave: { short: "Fulfilled by devotion and service.", long: "Deeply committed, often embracing high control and structure with immense trust.", tips: ["Negotiate everything.", "Partner must value devotion.", "Prioritize self-care."] },
      Pet: { short: "Loves care like a cherished companion.", long: "Revels in affection, play, often adopting animal traits in a caring dynamic.", tips: ["Choose a persona.", "Seek a caring Owner.", "Enjoy the play."] },
      Little: { short: "Embraces a carefree, childlike spirit.", long: "Finds joy in innocence, dependence, seeking nurturing and playful protection.", tips: ["Set age boundaries.", "Find a caring partner.", "Explore playfully."] },
      Puppy: { short: "Playful, loyal, eager to please.", long: "Brings boundless energy and affection, thriving on play and devoted training.", tips: ["Embrace enthusiasm.", "Seek a Trainer/Owner.", "Keep it safe."] },
      Kitten: { short: "Sensual, curious, mischievous.", long: "Blends sensuality with playful mischief, enjoying affection and tender teasing.", tips: ["Use your charm.", "Find a patient partner.", "Explore senses."] },
      Princess: { short: "Adores being pampered and centre stage.", long: "Revels in attention, care, embracing a regal yet dependent role.", tips: ["State needs clearly.", "Seek a doting partner.", "Enjoy the spotlight."] },
      'Rope Bunny': { short: "Loves the art and sensation of rope.", long: "Finds excitement in bondage aesthetics and surrender, requiring trust.", tips: ["Learn safety!", "Pair with skilled Rigger.", "Explore ties."] },
      Masochist: { short: "Finds pleasure/release through pain.", long: "Embraces discomfort within trust, often paired with submission.", tips: ["Use safewords!", "Find caring Sadist.", "Know your limits."] },
      Prey: { short: "Enjoys the thrill of the chase.", long: "Thrives on pursuit dynamics, finding excitement in vulnerability and capture.", tips: ["Clear consent is vital.", "Pair with Hunter.", "Enjoy the adrenaline."] },
      Toy: { short: "Loves being used and played with.", long: "Delights in being an object of pleasure, offering adaptability and submission.", tips: ["Communicate preferences.", "Find creative partner.", "Embrace the role."] },
      Doll: { short: "Enjoys being perfectly posed and admired.", long: "Finds fulfillment in being molded, blending vulnerability with aesthetic focus.", tips: ["Set comfort limits.", "Seek a Puppeteer/Owner.", "Enjoy transformation."] },
      Bunny: { short: "Gentle, shy, and easily startled.", long: "Brings innocence and quiet energy, thriving on soft affection.", tips: ["Communicate needs gently.", "Find patient partner.", "Embrace softness."] },
      Servant: { short: "Finds joy in dutiful service.", long: "Dedicated to partner’s needs, finding satisfaction in obedience and tasks.", tips: ["Define duties clearly.", "Seek respectful Dom.", "Balance service/self."] },
      Playmate: { short: "Loves shared fun and adventure.", long: "Brings camaraderie, enjoying dynamics filled with games and exploration.", tips: ["Keep communication open.", "Find playful partner.", "Explore together."] },
      Babygirl: { short: "Craves nurturing, affection, guidance.", long: "Blends innocence with dependence, seeking a caring, protective dynamic.", tips: ["Express needs.", "Find a Daddy/Mommy.", "Embrace vulnerability."] },
      Captive: { short: "Relishes the thrill of capture/restraint.", long: "Enjoys intensity of surrender, requiring high trust and negotiation.", tips: ["Negotiate scenarios.", "Pair with ethical Hunter/Dom.", "Focus on safety."] },
      Thrall: { short: "Bound by deep devotion/mental connection.", long: "Offers profound loyalty and submission, often with a focused mental state.", tips: ["Build trust deeply.", "Seek mindful Dom/Goddess.", "Explore connection."] },
      Puppet: { short: "Loves being precisely directed.", long: "Thrives on responsiveness, moving to cues with adaptable surrender.", tips: ["Practice responsiveness.", "Find clear Puppeteer.", "Enjoy the flow."] },
      Maid: { short: "Delights in order and polite service.", long: "Finds joy in creating a perfect environment with respectful duty.", tips: ["Focus on details.", "Seek appreciative Dom/Mistress.", "Enjoy the presentation."] },
      Painslut: { short: "Craves intense sensation, pushes limits.", long: "Actively seeks strong sensations, finding exhilaration in intensity.", tips: ["Know your hard limits.", "Pair with skilled Sadist.", "Prioritize aftercare."] },
      Bottom: { short: "Open to receiving sensation/direction.", long: "Excels at taking input, often with resilience for longer scenes.", tips: ["Communicate capacity.", "Find attentive Top.", "Pace yourself."] },
      'Classic Dominant': { short: "Leads with confidence and care.", long: "Revels in control and responsibility, guiding partner's surrender with trust.", tips: ["Listen actively.", "Balance firmness/kindness.", "Learn safety."] },
      Assertive: { short: "Leads with bold, clear direction.", long: "Takes charge confidently, thriving where clear authority shapes the scene.", tips: ["Be direct.", "Pair with receptive sub.", "Temper boldness."] },
      Nurturer: { short: "Guides with warmth and empathy.", long: "Blends control with care, creating a supportive dynamic for growth.", tips: ["Be patient.", "Pair with Little/Pet.", "Foster safety."] },
      Strict: { short: "Enforces rules with precision.", long: "Maintains order, finding satisfaction in structure and obedience.", tips: ["Set clear expectations.", "Pair with Slave/Servant.", "Reward compliance."] },
      Master: { short: "Leads with deep authority/responsibility.", long: "Guides partner with control, care, and commitment in structured dynamics.", tips: ["Build trust.", "Understand partner.", "Negotiate terms."] },
      Mistress: { short: "Commands with grace and power.", long: "Leads confidently, often blending sensuality with elegant, intense control.", tips: ["Embrace your power.", "Pair with Slave/Toy.", "Explore creativity."] },
      Daddy: { short: "Protects and guides with firm love.", long: "Blends care with authority, offering structure in a loving, firm dynamic.", tips: ["Be consistent.", "Pair with Little/Babygirl.", "Balance discipline/affection."] },
      Mommy: { short: "Nurtures and guides with warmth.", long: "Offers care and control, creating a safe space for partner's growth.", tips: ["Be patient.", "Pair with Little/Pet.", "Encourage growth."] },
      Owner: { short: "Takes pride in possession and care.", long: "Finds fulfillment in control and responsibility, often in pet play or TPE.", tips: ["Set clear rules.", "Pair with Pet/Slave.", "Provide structure."] },
      Rigger: { short: "Artist of restraint and sensation.", long: "Excels in bondage art, blending creativity with control and trust.", tips: ["Prioritize safety!", "Pair with Rope Bunny.", "Explore aesthetics."] },
      Sadist: { short: "Finds joy in giving sensation with care.", long: "Enjoys inflicting discomfort consensually, focusing on intensity and connection.", tips: ["Negotiate limits!", "Pair with Masochist.", "Mandatory aftercare!"] },
      Hunter: { short: "Thrives on the chase and capture.", long: "Enjoys pursuit dynamics, finding excitement in the thrill and surrender.", tips: ["Ensure enthusiastic consent.", "Pair with Prey.", "Enjoy the game safely."] },
      Trainer: { short: "Guides with patience and structure.", long: "Focuses on teaching/molding partner, often involving behavior/skills.", tips: ["Be clear/consistent.", "Pair with Pet/Slave.", "Celebrate progress."] },
      Puppeteer: { short: "Controls with creative precision.", long: "Enjoys directing every move, partner becomes extension of their will.", tips: ["Communicate vision.", "Pair with Doll/Toy.", "Explore artistry."] },
      Protector: { short: "Leads with vigilance and strength.", long: "Blends authority with deep responsibility, ensuring partner feels safe.", tips: ["Be observant.", "Pair with Little/Pet.", "Foster trust."] },
      Disciplinarian: { short: "Enforces rules with firm fairness.", long: "Excels at boundaries/order, enjoys guiding resistant or compliant partners.", tips: ["Be clear on rules/consequences.", "Stay patient/fair.", "Reward effort."] },
      Caretaker: { short: "Nurtures and supports holistically.", long: "Provides safe space, often in age/pet play, ensuring well-being.", tips: ["Be attentive.", "Pair with Little/Pet.", "Encourage exploration."] },
      Sir: { short: "Leads with honor and respect.", long: "Commands with authority and integrity, valuing tradition and structure.", tips: ["Uphold values.", "Pair with Submissive/Slave.", "Lead by example."] },
      Goddess: { short: "Inspires worship and adoration.", long: "Embodies power/grace, partner offers devotion/service.", tips: ["Embrace your power.", "Pair with Thrall/Servant.", "Set high standards."] },
      Commander: { short: "Leads with strategic control.", long: "Takes charge with precision/vision, often in complex scenes/dynamics.", tips: ["Plan scenarios.", "Pair with Switch/Submissive.", "Execute confidently."] }
    };
    this.sfDynamicMatches = {
      'Classic Submissive': { dynamic: "Power Exchange", match: "Classic Dominant", desc: "Classic trust/guidance.", longDesc: "Mutual respect, clear roles." },
      Brat: { dynamic: "Taming Play", match: "Disciplinarian/Strict", desc: "Fun push-pull.", longDesc: "Resistance meets control playfully." },
      Slave: { dynamic: "Master/Slave", match: "Master/Mistress", desc: "Deep trust/devotion.", longDesc: "High power exchange, structure." },
      Pet: { dynamic: "Pet Play", match: "Owner/Caretaker", desc: "Playful bond of care.", longDesc: "Affection and guidance define it." },
      Little: { dynamic: "Age Play", match: "Caretaker/Daddy/Mommy", desc: "Nurturing innocence.", longDesc: "Care, trust, playful protection." },
      Puppy: { dynamic: "Pup Play", match: "Trainer/Owner", desc: "Lively play/training.", longDesc: "Energy meets discipline playfully." },
      Kitten: { dynamic: "Kitten Play", match: "Owner/Nurturer", desc: "Sensual, charming.", longDesc: "Charm meets gentle control." },
      Princess: { dynamic: "Pampering Play", match: "Daddy/Sir/Caretaker", desc: "Regal care.", longDesc: "Spoiling meets structure/service." },
      'Rope Bunny': { dynamic: "Bondage Play", match: "Rigger", desc: "Artistic restraint.", longDesc: "Trust, creativity, sensation focus." },
      Masochist: { dynamic: "Sadomasochism", match: "Sadist", desc: "Thrilling sensation exchange.", longDesc: "Pain/pleasure balanced with trust." },
      Prey: { dynamic: "Primal Play", match: "Hunter", desc: "Exhilarating chase.", longDesc: "Pursuit and surrender drive it." },
      Toy: { dynamic: "Objectification Play", match: "Owner/Puppeteer", desc: "Playful usage.", longDesc: "Control and adaptability shine." },
      Doll: { dynamic: "Transformation Play", match: "Puppeteer/Master", desc: "Creative shaping.", longDesc: "Aesthetic control and trust." },
      Bunny: { dynamic: "Gentle Play", match: "Caretaker/Protector", desc: "Sweet, soft bond.", longDesc: "Innocence meets gentle care." },
      Servant: { dynamic: "Service Play", match: "Master/Mistress/Sir", desc: "Structured duty.", longDesc: "Guidance meets respectful service." },
      Playmate: { dynamic: "Adventure Play", match: "Playmate/Switch", desc: "Shared fun.", longDesc: "Equal footing in exploration." },
      Babygirl: { dynamic: "Age Play", match: "Daddy/Mommy", desc: "Nurturing affection.", longDesc: "Guidance, love, protection." },
      Captive: { dynamic: "Captivity Play", match: "Hunter/Master", desc: "Intense scenario.", longDesc: "Control/surrender with safety." },
      Thrall: { dynamic: "Devotion/Worship", match: "Goddess/Master", desc: "Deep mental bond.", longDesc: "Loyalty meets command." },
      Puppet: { dynamic: "Puppet Play", match: "Puppeteer", desc: "Precise control.", longDesc: "Adaptability meets direction." },
      Maid: { dynamic: "Service Play", match: "Mistress/Sir/Master", desc: "Refined duty.", longDesc: "Order meets elegant command." },
      Painslut: { dynamic: "Intense S/M", match: "Sadist", desc: "Fiery intensity.", longDesc: "Craving meets skillful delivery." },
      Bottom: { dynamic: "Sensation/Power Play", match: "Classic Dominant/Sadist", desc: "Receptive endurance.", longDesc: "Openness meets various topping." },
      'Classic Dominant': { dynamic: "Power Exchange", match: "Classic Submissive/Bottom", desc: "Balanced guidance.", longDesc: "Authority meets trust/receptivity." },
      Assertive: { dynamic: "Assertive Control", match: "Classic Submissive/Servant", desc: "Clear direction.", longDesc: "Boldness meets willing follow." },
      Nurturer: { dynamic: "Nurturing Care", match: "Little/Pet/Kitten", desc: "Warm support.", longDesc: "Care fosters comfort/growth." },
      Strict: { dynamic: "Discipline Play", match: "Slave/Servant/Brat", desc: "Ordered structure.", longDesc: "Rules meet obedience/challenge." },
      Master: { dynamic: "Master/Slave", match: "Slave/Servant", desc: "Deep authority.", longDesc: "Responsibility meets devotion." },
      Mistress: { dynamic: "Mistress/Servant", match: "Servant/Slave/Toy", desc: "Elegant command.", longDesc: "Grace meets service/play." },
      Daddy: { dynamic: "Daddy/Little", match: "Little/Babygirl/Princess", desc: "Protective guidance.", longDesc: "Firm care meets innocence." },
      Mommy: { dynamic: "Mommy/Little", match: "Little/Pet", desc: "Loving structure.", longDesc: "Warmth meets playful dependence." },
      Owner: { dynamic: "Owner/Pet", match: "Pet/Puppy/Kitten/Toy/Slave", desc: "Possessive care.", longDesc: "Control meets loyalty/utility." },
      Rigger: { dynamic: "Bondage Play", match: "Rope Bunny", desc: "Artistic restraint.", longDesc: "Skill meets willing canvas." },
      Sadist: { dynamic: "Sadomasochism", match: "Masochist/Painslut", desc: "Controlled intensity.", longDesc: "Infliction meets reception safely." },
      Hunter: { dynamic: "Primal Play", match: "Prey/Captive", desc: "Thrilling pursuit.", longDesc: "Instinct meets playful fear." },
      Trainer: { dynamic: "Training Play", match: "Puppy/Slave/Pet", desc: "Skill development.", longDesc: "Patience meets eagerness." },
      Puppeteer: { dynamic: "Control Play", match: "Doll/Puppet/Toy", desc: "Creative direction.", longDesc: "Precision meets responsiveness." },
      Protector: { dynamic: "Protection Play", match: "Little/Pet/Bunny", desc: "Steadfast safety.", longDesc: "Vigilance meets vulnerability." },
      Disciplinarian: { dynamic: "Discipline Play", match: "Brat/Slave", desc: "Fair correction.", longDesc: "Structure meets challenge/compliance." },
      Caretaker: { dynamic: "Caretaking Play", match: "Little/Pet/Bunny", desc: "Holistic support.", longDesc: "Nurturing meets dependence." },
      Sir: { dynamic: "Sir/Submissive", match: "Classic Submissive/Servant", desc: "Respectful authority.", longDesc: "Honor meets duty/obedience." },
      Goddess: { dynamic: "Worship Play", match: "Thrall/Slave", desc: "Reverent power.", longDesc: "Adoration meets command." },
      Commander: { dynamic: "Command Play", match: "Classic Submissive/Servant/Switch", desc: "Strategic leadership.", longDesc: "Decisiveness meets execution." }
    };
    this.sfStyleKeyTraits = { // Ensure keys match Style Descriptions/Matches
      'Classic Submissive': ['obedience', 'service', 'presentation', 'trust'], 'Brat': ['playful defiance', 'mischief', 'trust'], 'Slave': ['devotion', 'surrender', 'obedience', 'service'], 'Pet': ['affection seeking', 'playfulness', 'non-verbal expression', 'trust'], 'Little': ['age regression comfort', 'need for guidance', 'trust'], 'Puppy': ['boundless energy', 'trainability', 'obedience'], 'Kitten': ['curiosity', 'gracefulness', 'affection seeking'], 'Princess': ['desire for pampering', 'delegation tendency', 'innocence'], 'Rope Bunny': ['rope enthusiasm', 'patience during tying', 'sensuality'], 'Masochist': ['pain interpretation', 'sensation seeking', 'trust'], 'Prey': ['enjoyment of chase', 'fear play comfort', 'vulnerability'], 'Toy': ['objectification comfort', 'responsiveness to control', 'adaptability'], 'Doll': ['aesthetic focus', 'stillness / passivity', 'objectification comfort'], 'Bunny': ['shyness / skittishness', 'gentle affection need', 'innocence'], 'Servant': ['task focus', 'anticipating needs', 'obedience', 'politeness'], 'Playmate': ['enthusiasm for games', 'good sport', 'playfulness'], 'Babygirl': ['vulnerability expression', 'coquettishness', 'need for guidance'], 'Captive': ['struggle performance', 'acceptance of fate', 'vulnerability'], 'Thrall': ['mental focus', 'suggestibility', 'devotion'], 'Puppet': ['responsiveness to direction', 'passivity in control', 'adaptability'], 'Maid': ['attention to detail', 'uniformity', 'service'], 'Painslut': ['pain seeking', 'endurance display', 'craving'], 'Bottom': ['receptivity', 'power exchange focus', 'painTolerance'],
      'Classic Dominant': ['leadership', 'control', 'authority', 'care'], 'Assertive': ['direct communication', 'boundary setting', 'authority'], 'Nurturer': ['emotional support', 'patience', 'care', 'empathy'], 'Strict': ['rule enforcement', 'discipline focus', 'authority'], 'Master': ['expectation setting', 'presence', 'authority', 'control'], 'Mistress': ['expectation setting', 'presence', 'authority', 'creativity'], 'Daddy': ['protective guidance', 'affectionate authority', 'care'], 'Mommy': ['nurturing comfort', 'gentle discipline', 'care'], 'Owner': ['possessiveness', 'behavioral training', 'control'], 'Rigger': ['rope technique', 'aesthetic vision', 'precision', 'care'], 'Sadist': ['sensation control', 'psychological focus', 'intensity', 'care'], 'Hunter': ['pursuit drive', 'instinct reliance', 'boldness'], 'Trainer': ['skill development focus', 'structured methodology', 'patience', 'discipline focus'], 'Puppeteer': ['fine motor control', 'objectification gaze', 'control', 'creativity'], 'Protector': ['vigilance', 'defensive instinct', 'care', 'authority'], 'Disciplinarian': ['consequence delivery', 'detachment during discipline', 'rule enforcement'], 'Caretaker': ['holistic well-being focus', 'rule implementation for safety', 'care'], 'Sir': ['formal demeanor', 'service expectation', 'authority'], 'Goddess': ['worship seeking', 'effortless command', 'presence'], 'Commander': ['strategic direction', 'decisiveness', 'leadership', 'authority']
    };

    // --- Element Mapping ---
    this.elements = {
      formSection: document.getElementById('form-section'),
      name: document.getElementById('name'),
      avatarDisplay: document.getElementById('avatar-display'),
      avatarInput: document.getElementById('avatar-input'),
      avatarPicker: document.querySelector('.avatar-picker'),
      role: document.getElementById('role'),
      style: document.getElementById('style'),
      formStyleFinderLink: document.getElementById('form-style-finder-link'),
      traitsContainer: document.getElementById('traits-container'),
      traitInfoPopup: document.getElementById('trait-info-popup'),
      traitInfoClose: document.getElementById('trait-info-close'),
      traitInfoTitle: document.getElementById('trait-info-title'),
      traitInfoBody: document.getElementById('trait-info-body'),
      save: document.getElementById('save'),
      clearForm: document.getElementById('clear-form'),
      peopleList: document.getElementById('people-list'),
      livePreview: document.getElementById('live-preview'),
      modal: document.getElementById('detail-modal'),
      modalBody: document.getElementById('modal-body'),
      modalClose: document.getElementById('modal-close'),
      resourcesBtn: document.getElementById('resources-btn'),
      resourcesModal: document.getElementById('resources-modal'),
      resourcesClose: document.getElementById('resources-close'),
      resourcesBody: document.getElementById('resources-body'),
      glossaryBtn: document.getElementById('glossary-btn'),
      glossaryModal: document.getElementById('glossary-modal'),
      glossaryClose: document.getElementById('glossary-close'),
      glossaryBody: document.getElementById('glossary-body'),
      styleDiscoveryBtn: document.getElementById('style-discovery-btn'),
      styleDiscoveryModal: document.getElementById('style-discovery-modal'),
      styleDiscoveryClose: document.getElementById('style-discovery-close'),
      styleDiscoveryRoleFilter: document.getElementById('style-discovery-role'),
      styleDiscoveryBody: document.getElementById('style-discovery-body'),
      themesBtn: document.getElementById('themes-btn'),
      themesModal: document.getElementById('themes-modal'),
      themesClose: document.getElementById('themes-close'),
      themesBody: document.getElementById('themes-body'),
      exportBtn: document.getElementById('export-btn'),
      importBtn: document.getElementById('import-btn'),
      importFileInput: document.getElementById('import-file-input'),
      themeToggle: document.getElementById('theme-toggle'),
      styleFinderTriggerBtn: document.getElementById('style-finder-trigger-btn'),
      sfModal: document.getElementById('style-finder-modal'),
      sfCloseBtn: document.getElementById('sf-close-style-finder'),
      sfProgressTracker: document.getElementById('sf-progress-tracker'),
      sfStepContent: document.getElementById('sf-step-content'),
      sfFeedback: document.getElementById('sf-feedback'),
      sfDashboard: document.getElementById('sf-dashboard'),
      detailModalTitle: document.getElementById('detail-modal-title'),
      resourcesModalTitle: document.getElementById('resources-modal-title'),
      glossaryModalTitle: document.getElementById('glossary-modal-title'),
      styleDiscoveryTitle: document.getElementById('style-discovery-title'),
      themesModalTitle: document.getElementById('themes-modal-title'),
      sfModalTitle: document.getElementById('sf-modal-title'),
      formTitle: document.getElementById('form-title'),
    };

       // Critical element check
    const criticalElements = [
        'name', 'role', 'style', 'save', 'peopleList', 'modal', 'sfModal',
        'sfStepContent', 'styleFinderTriggerBtn', 'glossaryBody', 'resourcesBody',
        'styleDiscoveryBody', 'themesBody', 'modalBody', 'livePreview', 'traitsContainer'
    ];
    const missingKeys = [];
    for (const key of criticalElements) {
        if (!this.elements[key]) {
            missingKeys.push(key);
        }
    
    }

    if (missingKeys.length > 0) {
        const errorMsg = `Cannot initialize: HTML element(s) not found (ID: ${missingKeys.join(', ')}). Check index.html.`;
        console.error(errorMsg);
        throw new Error(errorMsg);
    }
    // End Critical element check block

    
    // Log and throw error *after* the loop
  // Log and throw error *after* the loop if (missingElement) { const errorMsg = `Initialization failed: Required HTML element(s) absent. Check console for details (IDs: ${missingKeys.join(', ')}).`; console.error(`Critical HTML element(s) not found: ID(s) '${missingKeys.join("', '")}'. Cannot initialize KinkCompass.`); // Log detailed info throw new Error(errorMsg); // Throw error  }
    console.log("CONSTRUCTOR: Elements found.");
    this.addEventListeners();
    console.log("CONSTRUCTOR: Listeners added.");
    this.loadFromLocalStorage();
    this.applySavedTheme();
    this.renderStyles(this.elements.role.value);
    this.renderTraits(this.elements.role.value, this.elements.style.value);
    this.renderList();
    this.updateLivePreview();
    console.log("CONSTRUCTOR: Initial render complete.");
  } // --- End of constructor ---

  // --- Local Storage ---
  loadFromLocalStorage(){try{const data=localStorage.getItem('kinkProfiles');const profiles=data?JSON.parse(data):[];this.people=profiles.map(p=>({...p,id:p.id??Date.now(),name:p.name??"Unnamed",role:p.role??"submissive",style:p.style??"",avatar:p.avatar||'❓',goals:Array.isArray(p.goals)?p.goals:[],history:Array.isArray(p.history)?p.history:[],achievements:Array.isArray(p.achievements)?p.achievements:[],reflections:typeof p.reflections==='object'&&p.reflections!==null?p.reflections:{text:p.reflections||''},traits:typeof p.traits==='object'&&p.traits!==null?p.traits:{}}));console.log(`Loaded ${this.people.length} profiles.`);}catch(e){console.error("Failed to load profiles:",e);this.people=[];this.showNotification("Error loading profiles. Starting fresh.", "error");}}
  saveToLocalStorage(){try{localStorage.setItem('kinkProfiles',JSON.stringify(this.people));console.log(`Saved ${this.people.length} profiles.`);}catch(e){console.error("Failed to save profiles:",e);this.showNotification("Error saving data. Storage might be full or corrupted.", "error");}}

  // --- Event Listeners Setup ---
   // --- Event Listeners Setup ---
  addEventListeners() {
    console.log("Attaching event listeners...");
    this.elements.role?.addEventListener('change', (e) => { const selectedRole = e.target.value; this.renderStyles(selectedRole); this.elements.style.value = ''; this.renderTraits(selectedRole, ''); this.updateLivePreview(); });
    this.elements.style?.addEventListener('change', (e) => { this.renderTraits(this.elements.role.value, e.target.value); this.updateLivePreview(); });
    this.elements.name?.addEventListener('input', () => this.updateLivePreview());
    this.elements.avatarPicker?.addEventListener('click', (e) => { if (e.target.classList.contains('avatar-btn')) { const emoji = e.target.dataset.emoji; if (emoji) { this.elements.avatarInput.value = emoji; this.elements.avatarDisplay.textContent = emoji; this.elements.avatarPicker.querySelectorAll('.avatar-btn').forEach(btn => { btn.classList.toggle('selected', btn === e.target); }); this.updateLivePreview(); } } });
    this.elements.save?.addEventListener('click', () => this.savePerson());
    this.elements.clearForm?.addEventListener('click', () => this.resetForm(true));
    this.elements.formStyleFinderLink?.addEventListener('click', () => this.sfStart());
    this.elements.traitsContainer?.addEventListener('input', (e) => { if (e.target.classList.contains('trait-slider')) { this.handleTraitSliderInput(e); } });
    this.elements.traitsContainer?.addEventListener('click', (e) => { if (e.target.classList.contains('trait-info-btn')) { this.handleTraitInfoClick(e); } });
    this.elements.traitInfoClose?.addEventListener('click', () => this.hideTraitInfo());
    this.elements.peopleList?.addEventListener('click', (e) => this.handleListClick(e));
    this.elements.peopleList?.addEventListener('keydown', (e) => this.handleListKeydown(e));
    this.elements.styleFinderTriggerBtn?.addEventListener('click', () => this.sfStart());
    this.elements.sfCloseBtn?.addEventListener('click', () => this.sfClose());
    this.elements.styleDiscoveryBtn?.addEventListener('click', () => this.showStyleDiscovery());
    this.elements.styleDiscoveryClose?.addEventListener('click', () => this.closeModal(this.elements.styleDiscoveryModal));
    this.elements.styleDiscoveryRoleFilter?.addEventListener('change', () => this.renderStyleDiscoveryContent());
    this.elements.glossaryBtn?.addEventListener('click', () => this.showGlossary());
    this.elements.glossaryClose?.addEventListener('click', () => this.closeModal(this.elements.glossaryModal));
    this.elements.resourcesBtn?.addEventListener('click', () => this.openModal(this.elements.resourcesModal));
    this.elements.resourcesClose?.addEventListener('click', () => this.closeModal(this.elements.resourcesModal));
    this.elements.themesBtn?.addEventListener('click', () => this.openModal(this.elements.themesModal));
    this.elements.themesClose?.addEventListener('click', () => this.closeModal(this.elements.themesModal));
    this.elements.themesBody?.addEventListener('click', (e) => this.handleThemeSelection(e));
    this.elements.exportBtn?.addEventListener('click', () => this.exportData());
    this.elements.importBtn?.addEventListener('click', () => this.elements.importFileInput?.click());
    this.elements.importFileInput?.addEventListener('change', (e) => this.importData(e));
    this.elements.themeToggle?.addEventListener('click', () => this.toggleTheme());
    this.elements.modalBody?.addEventListener('click', (e) => this.handleModalBodyClick(e));
    this.elements.modalClose?.addEventListener('click', () => this.closeModal(this.elements.modal));
    this.elements.sfStepContent?.addEventListener('click', (e) => { const button = e.target.closest('button[data-action]'); if (button) { this.handleStyleFinderAction(button.dataset.action, button.dataset); return; } const icon = e.target.closest('.sf-info-icon[data-trait]'); if (icon) { this.handleStyleFinderAction('showTraitInfo', icon.dataset); return; } });
    this.elements.sfStepContent?.addEventListener('input', (e) => { if (e.target.classList.contains('sf-trait-slider') && e.target.dataset.trait) { this.handleStyleFinderSliderInput(e.target); } });
    document.body.addEventListener('click', (e) => { if (e.target.classList.contains('sf-close-btn')) { e.target.closest('.sf-style-info-popup')?.remove(); } });
    window.addEventListener('click', (e) => this.handleWindowClick(e));
    window.addEventListener('keydown', (e) => this.handleWindowKeydown(e));
    console.log("Event listeners setup complete.");
  } // --- End addEventListeners ---

  // --- Event Handlers ---
  handleListClick(e){const li=e.target.closest('.person');if(!li)return;const id=parseInt(li.dataset.id,10);if(isNaN(id))return;console.log("List Click on ID:",id,"Target:",e.target);const actionTarget=e.target.closest('button');const action=actionTarget?actionTarget.dataset.action:null;if(action==='edit'){this.editPerson(id);}else if(action==='delete'){this.deletePerson(id);}else{this.showPersonDetails(id);}}
  handleListKeydown(e){const li=e.target.closest('.person');if(!li)return;if(e.key==='Enter'||e.key===' '){e.preventDefault();const id=parseInt(li.dataset.id,10);if(!isNaN(id))this.showPersonDetails(id);}}
  handleWindowClick(e){const target=e.target;if(target.classList.contains('modal')){if(target===this.elements.modal)this.closeModal(this.elements.modal);else if(target===this.elements.sfModal)this.sfClose();else if(target===this.elements.resourcesModal)this.closeModal(this.elements.resourcesModal);else if(target===this.elements.glossaryModal)this.closeModal(this.elements.glossaryModal);else if(target===this.elements.styleDiscoveryModal)this.closeModal(this.elements.styleDiscoveryModal);else if(target===this.elements.themesModal)this.closeModal(this.elements.themesModal);}}
  handleWindowKeydown(e){if(e.key==='Escape'){if(this.elements.modal?.style.display!=='none')this.closeModal(this.elements.modal);if(this.elements.sfModal?.style.display!=='none')this.sfClose();if(this.elements.resourcesModal?.style.display!=='none')this.closeModal(this.elements.resourcesModal);if(this.elements.glossaryModal?.style.display!=='none')this.closeModal(this.elements.glossaryModal);if(this.elements.styleDiscoveryModal?.style.display!=='none')this.closeModal(this.elements.styleDiscoveryModal);if(this.elements.themesModal?.style.display!=='none')this.closeModal(this.elements.themesModal);}}
  handleTraitSliderInput(e){const slider=e.target;this.updateTraitDescription(slider);this.updateLivePreview();const value=slider.value;const person=this.currentEditId?this.people.find(p=>p.id===this.currentEditId):null;if(person){if(value==='5')grantAchievement(person,'max_trait');if(value==='1')grantAchievement(person,'min_trait');}}
  handleTraitInfoClick(e){const button=e.target;const traitName=button.dataset.trait;if(traitName)this.showTraitInfo(traitName);}
  handleModalBodyClick(e){const target=e.target;const button=target.closest('button');const check=button||target;if(!check)return;const id=check.id;const classList=check.classList;const personId=parseInt(check.dataset.personId,10);const goalId=parseInt(check.dataset.goalId,10);console.log("Detail Modal Click: Elm:",check,"ID:",id,"Class:",classList);if(id==='save-reflections-btn'&&!isNaN(personId)){this.saveReflections(personId);}else if(id==='prompt-btn'){this.showJournalPrompt(personId);}else if(id==='snapshot-btn'&&!isNaN(personId)){this.addSnapshotToHistory(personId);}else if(classList.contains('snapshot-info-btn')){this.toggleSnapshotInfo(check);}else if(id==='reading-btn'&&!isNaN(personId)){this.showKinkReading(personId);}else if(classList.contains('add-goal-btn')&&!isNaN(personId)){this.addGoal(personId);}else if(classList.contains('toggle-goal-btn')&&!isNaN(personId)&&!isNaN(goalId)){this.toggleGoalStatus(personId,goalId);}else if(classList.contains('delete-goal-btn')&&!isNaN(personId)&&!isNaN(goalId)){this.deleteGoal(personId,goalId);}else{console.log("No matching detail modal action.");}}
  handleThemeSelection(e){const button=e.target.closest('.theme-option-btn');if(button){const themeName=button.dataset.theme;if(themeName){this.setTheme(themeName);grantAchievement({},'theme_changer');this.closeModal(this.elements.themesModal);}}}
  handleStyleFinderAction(action, dataset = {}) { console.log("SF Action:", action, dataset); try { switch (action) { case 'next': const currentTrait = dataset.trait; const currentStepType = this.sfSteps[this.sfStep]?.type; if (currentStepType === 'trait' && currentTrait && this.sfAnswers.traits[currentTrait] === undefined) { this.sfShowFeedback("Please slide to pick a vibe first!"); return; } this.sfNextStep(); break; case 'prev': this.sfPrevStep(); break; case 'setRole': if (dataset.role && ['submissive', 'dominant'].includes(dataset.role)) { this.sfSetRole(dataset.role); } else { console.error("Set role action triggered without valid role data:", dataset.role); this.showNotification("Invalid role selected.", "error"); } break; case 'startOver': this.sfStartOver(); break; case 'close': this.sfClose(); break; case 'applyStyle': const r = dataset.role; const s = dataset.style; if (r && s) { this.applyStyleFinderResult(r, s); } else { this.showNotification("Error applying style. Role or Style missing.", "error"); console.error("Apply Style Error: Missing role or style in dataset", dataset); } break; case 'showFullDetails': if (dataset.style) { this.sfShowFullDetails(dataset.style); } else { console.error("Show Full Details action triggered without style data."); this.showNotification("Could not show details for style.", "error"); } break; case 'showTraitInfo': if (dataset.trait) { this.sfShowTraitInfo(dataset.trait); } else { console.error("Show Trait Info action triggered without trait data."); this.showNotification("Could not show info for trait.", "error"); } break; default: console.warn("Unknown Style Finder action received:", action); } } catch (error) { console.error("Error handling Style Finder action:", action, error); this.showNotification("An error occurred processing your action.", "error"); } }
  handleStyleFinderSliderInput(sliderElement) { const traitName = sliderElement.dataset.trait; const value = parseInt(sliderElement.value, 10); if (traitName) { this.sfSetTrait(traitName, value); const descElement = this.elements.sfStepContent?.querySelector(`#sf-desc-${traitName}`); const descriptions = this.sfSliderDescriptions?.[traitName] ?? []; if (descElement) { const safeValue = Number(value); if (descriptions.length > 0 && safeValue >= 1 && safeValue <= descriptions.length) { descElement.textContent = this.escapeHTML(descriptions[safeValue - 1]); } else { descElement.textContent = `Level ${safeValue}`; console.warn(`Slider description missing or invalid for trait '${traitName}' at value ${safeValue}`); } } this.sfUpdateDashboard(); } else { console.error("Slider input event fired without data-trait attribute."); } }

  // --- Core Rendering ---
  renderStyles(roleKey) { const selectElement=this.elements.style; if(!selectElement)return; selectElement.innerHTML='<option value="">-- Select a Style --</option>'; const roleData=bdsmData[roleKey]; let styles=[]; if(roleData?.styles){styles=roleData.styles;}else if(roleKey==='switch'&&bdsmData.switch?.styles){styles=bdsmData.switch.styles;} if(styles.length>0){styles.forEach(style=>{selectElement.innerHTML+=`<option value="${this.escapeHTML(style.name)}">${this.escapeHTML(style.name)}</option>`;}); selectElement.disabled=false;}else{selectElement.innerHTML='<option value="">-- Select Role First --</option>'; selectElement.disabled=true;} }
  renderTraits(roleKey, styleName) { const container=this.elements.traitsContainer; if(!container)return; container.innerHTML=''; const roleData=bdsmData[roleKey]; if(!roleData){container.innerHTML=`<p class="muted-text">Select a valid role.</p>`; return;} const coreTraits=roleData.coreTraits||[]; let styleTraits=[]; let styleObj=null; let message=''; if(styleName){styleObj=roleData.styles?.find(s=>s.name===styleName); if(styleObj){styleTraits=styleObj.traits||[]; if(styleTraits.length===0&&coreTraits.length>0){message=`<p class="muted-text trait-info-message">Style '${this.escapeHTML(styleName)}' primarily uses the core traits for this role.</p>`;}}else{console.warn(`Style object not found for: ${roleKey} - ${styleName}`); message=`<p class="muted-text trait-info-message">Details for style '${this.escapeHTML(styleName)}' not found. Showing core traits.</p>`;}}else if(coreTraits.length===0){container.innerHTML=`<p class="muted-text">Select a style to see relevant traits, or define core traits for this role.</p>`; return;}else{message=`<p class="muted-text trait-info-message">Select a style, or adjust core traits below.</p>`;} const traitsToRender=[]; const uniqueTraitNames=new Set(); [...styleTraits,...coreTraits].forEach(trait=>{if(trait&&trait.name&&!uniqueTraitNames.has(trait.name)){const fullTraitDef=styleTraits.find(st=>st.name===trait.name)||coreTraits.find(ct=>ct.name===trait.name)||bdsmData.switch?.coreTraits?.find(swt=>swt.name===trait.name); if(fullTraitDef){traitsToRender.push(fullTraitDef); uniqueTraitNames.add(trait.name);}}}); if(traitsToRender.length===0&&!styleName){container.innerHTML=`<p class="muted-text">No core traits defined for role '${roleKey}'. Select a style.</p>`; return;} if(traitsToRender.length===0&&styleName){container.innerHTML=`<p class="muted-text">No specific or core traits found for style '${this.escapeHTML(styleName)}'.</p>`; return;} if(message)container.innerHTML+=message; traitsToRender.forEach(trait=>{container.innerHTML+=this.createTraitHTML(trait);}); container.querySelectorAll('.trait-slider').forEach(slider=>{this.updateTraitDescription(slider);}); this.hideTraitInfo();}
  createTraitHTML(trait){const displayName=trait.name.charAt(0).toUpperCase()+trait.name.slice(1); const id=`trait-${trait.name.replace(/[^a-zA-Z0-9-_]/g,'-')}`; const initialValue=3; let initialDesc='Adjust slider...'; if(trait.desc&&trait.desc[initialValue]){initialDesc=trait.desc[initialValue];}else if(trait.desc&&trait.desc["3"]){initialDesc=trait.desc["3"];}else{console.warn(`Initial description missing for trait '${trait.name}' at value 3.`);} return`<div class="trait"><label for="${id}">${this.escapeHTML(displayName)}</label><button class="trait-info-btn" data-trait="${trait.name}" aria-label="Info about ${this.escapeHTML(displayName)}">ℹ️</button><span class="trait-value">${initialValue}</span><input type="range" id="${id}" min="1" max="5" value="${initialValue}" class="trait-slider" data-trait="${trait.name}" aria-label="${this.escapeHTML(displayName)} rating" autocomplete="off"/><div class="trait-desc muted-text">${this.escapeHTML(initialDesc)}</div></div>`;}
  updateTraitDescription(slider){const traitName=slider.dataset.trait; const value=slider.value; const traitDescElement=slider.parentElement?.querySelector('.trait-desc'); const traitValueElement=slider.parentElement?.querySelector('.trait-value'); if(!traitDescElement||!traitValueElement||!traitName)return; traitValueElement.textContent=value; const roleKey=this.elements.role.value; const styleName=this.elements.style.value; const roleData=bdsmData[roleKey]; let traitDef=null; if(roleData){if(styleName){const styleObj=roleData.styles?.find(s=>s.name===styleName); traitDef=styleObj?.traits?.find(t=>t.name===traitName);} if(!traitDef){traitDef=roleData.coreTraits?.find(t=>t.name===traitName);} if(!traitDef&&roleKey==='switch'){traitDef=bdsmData.switch?.coreTraits?.find(t=>t.name===traitName);}} if(traitDef?.desc&&traitDef.desc[value]){traitDescElement.textContent=this.escapeHTML(traitDef.desc[value]);}else{traitDescElement.textContent=traitDef?'Description unavailable for this level.':'Trait definition missing.'; if(!traitDef)console.warn(`Trait definition not found for ${traitName} in role ${roleKey}/${styleName||'core'}`);}}
  renderList(){if(!this.elements.peopleList)return;this.elements.peopleList.innerHTML=this.people.length===0?`<li>No personas created yet! Use the form to start. ✨</li>`:this.people.map(p=>this.createPersonListItemHTML(p)).join('');}
  createPersonListItemHTML(person){const styleDisplay=person.style?this.escapeHTML(person.style):"Style N/A"; const roleDisplay=person.role.charAt(0).toUpperCase()+person.role.slice(1); const nameDisplay=this.escapeHTML(person.name); const avatar=person.avatar||'❓'; return`<li class="person" data-id="${person.id}" tabindex="0" aria-label="${nameDisplay}, ${roleDisplay} - ${styleDisplay}. Click to view details."><span class="person-info"><span class="person-avatar" aria-hidden="true">${avatar}</span><span class="person-name-details"><strong class="person-name">${nameDisplay}</strong><span class="person-details muted-text">(${roleDisplay} - ${styleDisplay})</span></span></span><span class="person-actions"><button class="edit-btn small-btn" data-action="edit" data-id="${person.id}" aria-label="Edit ${nameDisplay}">✏️</button><button class="delete-btn small-btn" data-action="delete" data-id="${person.id}" aria-label="Delete ${nameDisplay}">🗑️</button></span></li>`;}

  // --- CRUD ---
  savePerson(){const nameInput=this.elements.name; const name=nameInput.value.trim(); const avatar=this.elements.avatarInput.value||'❓'; const role=this.elements.role.value; const style=this.elements.style.value; if(!name){this.showNotification("Please enter a name for your persona.","error"); nameInput.focus(); return;} if(!role){this.showNotification("Please select a role.","error"); this.elements.role.focus(); return;} if(!style){this.showNotification("Please select a style for your persona.","error"); this.elements.style.focus(); return;} const sliders=this.elements.traitsContainer.querySelectorAll('.trait-slider'); const currentTraits={}; let missingTraitData=false; sliders.forEach(slider=>{const traitName=slider.dataset.trait; if(traitName){currentTraits[traitName]=slider.value;}else{console.error("Slider missing data-trait attribute:",slider); missingTraitData=true;}}); if(missingTraitData){this.showNotification("Error gathering trait data.","error"); return;} const roleData=bdsmData[role]; const coreTraits=roleData?.coreTraits?.map(t=>t.name)||[]; const styleObj=roleData?.styles?.find(s=>s.name===style); const styleSpecificTraits=styleObj?.traits?.map(t=>t.name)||[]; const expectedTraitNames=new Set([...coreTraits,...styleSpecificTraits]); for(const expectedName of expectedTraitNames){if(!currentTraits.hasOwnProperty(expectedName)){console.error(`Missing trait data for expected trait: '${expectedName}'. Rendered:`,Object.keys(currentTraits)); this.showNotification(`Missing data for required trait: '${expectedName}'. Try again.`,"error"); return;}} const existingPerson=this.currentEditId?this.people.find(p=>p.id===this.currentEditId):null; const personData={id:this.currentEditId||Date.now(),name:name,avatar:avatar,role:role,style:style,traits:currentTraits,goals:existingPerson?.goals||[],history:existingPerson?.history||[],achievements:existingPerson?.achievements||[],reflections:existingPerson?.reflections||{text:''},lastUpdated:Date.now()}; let isNew=false; if(this.currentEditId){const index=this.people.findIndex(p=>p.id===this.currentEditId); if(index!==-1){this.people[index]=personData; grantAchievement(personData,'profile_edited');}else{console.error("Error updating persona: ID not found."); this.showNotification("Error updating persona.","error"); this.people.push(personData); isNew=true;}}else{this.people.push(personData); isNew=true; grantAchievement(personData,'profile_created'); if(this.people.length>=5){grantAchievement(personData,'five_profiles');}} if(avatar!=='❓'){grantAchievement(personData,'avatar_chosen');} this.saveToLocalStorage(); this.renderList(); this.showNotification(`${this.escapeHTML(name)} ${isNew?'created':'updated'} successfully! ✨`,"success"); this.resetForm();}
  editPerson(personId){const person=this.people.find(p=>p.id===personId); if(!person){this.showNotification("Persona not found.","error"); return;} console.log("Editing person:",person); this.currentEditId=personId; this.elements.formTitle.textContent=`✨ Edit ${this.escapeHTML(person.name)} ✨`; this.elements.name.value=person.name; this.elements.avatarInput.value=person.avatar||'❓'; this.elements.avatarDisplay.textContent=person.avatar||'❓'; this.elements.avatarPicker?.querySelectorAll('.avatar-btn').forEach(btn=>{btn.classList.toggle('selected',btn.dataset.emoji===person.avatar);}); this.elements.role.value=person.role; this.renderStyles(person.role); this.elements.style.value=person.style; this.renderTraits(person.role,person.style); requestAnimationFrame(()=>{if(person.traits){Object.entries(person.traits).forEach(([traitName,value])=>{const slider=this.elements.traitsContainer.querySelector(`.trait-slider[data-trait="${traitName}"]`); if(slider){slider.value=value; this.updateTraitDescription(slider);}else{console.warn(`Slider for trait '${traitName}' not found during edit.`);}}); } this.updateLivePreview(); this.elements.save.textContent='Update Persona! ✨'; this.elements.formSection?.scrollIntoView({behavior:'smooth',block:'start'}); this.elements.name.focus();});}
  deletePerson(personId){const index=this.people.findIndex(p=>p.id===personId); if(index===-1)return; const personName=this.people[index].name; if(confirm(`🚨 Really delete persona "${this.escapeHTML(personName)}"? This cannot be undone.`)){this.people.splice(index,1); this.saveToLocalStorage(); this.renderList(); this.showNotification(`"${this.escapeHTML(personName)}" deleted.`,"info"); if(this.currentEditId===personId){this.resetForm();}}}
  resetForm(isManualClear=false){if(isManualClear&&this.currentEditId){if(!confirm("Discard current edits and clear the form?")){return;}} this.elements.formTitle.textContent='✨ Create New Persona ✨'; this.elements.name.value=''; this.elements.avatarInput.value='❓'; this.elements.avatarDisplay.textContent='❓'; this.elements.avatarPicker?.querySelectorAll('.selected').forEach(btn=>btn.classList.remove('selected')); this.elements.role.value='submissive'; this.renderStyles('submissive'); this.elements.style.value=''; this.renderTraits('submissive',''); this.currentEditId=null; this.elements.save.textContent='Save Persona! 💖'; this.updateLivePreview(); if(isManualClear){this.elements.name.focus();} console.log("Form reset."); this.hideTraitInfo();}


  // --- Live Preview ---
  updateLivePreview(){const name=this.elements.name.value.trim()||"Persona Name";const avatar=this.elements.avatarInput.value||'❓';const role=this.elements.role.value;const style=this.elements.style.value;const traits={};let hasTraits=false;this.elements.traitsContainer.querySelectorAll('.trait-slider').forEach(slider=>{const traitName=slider.dataset.trait;if(traitName){traits[traitName]=slider.value;hasTraits=true;}});let html='';if(!role){html=`<p class="muted-text">Select a role...</p>`;}else if(!style&&!hasTraits){html=`<p class="muted-text">Select a style for ${this.escapeHTML(name)} (${role})...</p>`;}else if(!style&&hasTraits){const roleData=bdsmData[role];html=`<h3 class="preview-title">${avatar} ${this.escapeHTML(name)}’s Core Vibe ${avatar}</h3><p><strong>Role:</strong> ${role.charAt(0).toUpperCase()+role.slice(1)}</p><p class="muted-text"><i>Core traits active. Select a style for more details!</i></p>`;if(roleData?.coreTraits?.length>0){html+=`<div class="core-trait-preview"><strong>Core Traits:</strong><ul>`;roleData.coreTraits.forEach(ct=>{const score=traits[ct.name];if(score){const desc=ct.desc?.[score]||"N/A";html+=`<li><strong>${this.escapeHTML(ct.name)} (${score}):</strong> ${this.escapeHTML(desc)}</li>`;}});html+=`</ul></div>`;}else{html+=`<p class="muted-text">No core traits defined for this role.</p>`;}}else if(style){const getBreakdownFunc=role==='submissive'?getSubBreakdown:(role==='dominant'?getDomBreakdown:null);let breakdown={strengths:'',improvements:''};if(getBreakdownFunc){try{breakdown=getBreakdownFunc(style,traits);}catch(e){console.error("Error getting style breakdown:",e);}}let topStyleTraitInfo=null;const roleData=bdsmData[role];const styleObj=roleData?.styles?.find(st=>st.name===style);if(styleObj?.traits?.length>0){let topScore=-1;let topTraitName='';styleObj.traits.forEach(traitDef=>{const score=parseInt(traits[traitDef.name]||0,10);if(score>topScore){topScore=score;topTraitName=traitDef.name;}});if(topTraitName&&topScore>0){const traitDef=styleObj.traits.find(t=>t.name===topTraitName);const desc=traitDef?.desc?.[topScore]||"N/A";topStyleTraitInfo=`<strong>Top Style Trait (${this.escapeHTML(topTraitName)} Lvl ${topScore}):</strong> ${this.escapeHTML(desc)}`;}}html=`<h3 class="preview-title">${avatar} ${this.escapeHTML(name)}’s Vibe ${avatar}</h3><p><strong>Role:</strong> ${role.charAt(0).toUpperCase()+role.slice(1)}</p><p><strong>Style:</strong> ${this.escapeHTML(style)}</p>`;if(breakdown.strengths||breakdown.improvements){html+=`<div class="style-breakdown preview-breakdown">`;if(breakdown.strengths)html+=`<div class="strengths"><h4>✨ Powers</h4><div>${breakdown.strengths}</div></div>`;if(breakdown.improvements)html+=`<div class="improvements"><h4>🌟 Quests</h4><div>${breakdown.improvements}</div></div>`;html+=`</div>`;}if(topStyleTraitInfo){html+=`<div class="top-trait-preview"><hr><p>${topStyleTraitInfo}</p></div>`;}}else{html=`<p class="muted-text">Select Role & Style to see the vibe! 🌈</p>`;}this.elements.livePreview.innerHTML=html;}


  // --- Modal Display ---
  showPersonDetails(personId){const person=this.people.find(p=>p.id===personId); if(!person){this.showNotification("Could not find persona details.","error"); return;} console.log("Showing details for:",person); const{goals=[],history=[],achievements=[],reflections={text:''},avatar='❓',style='N/A',traits={},role='N/A'}=person; const getBreakdownFunc=role==='submissive'?getSubBreakdown:(role==='dominant'?getDomBreakdown:null); let breakdown={strengths:'N/A',improvements:'N/A'}; if(getBreakdownFunc&&style!=='N/A'){try{breakdown=getBreakdownFunc(style,traits);}catch(e){console.error("Error generating breakdown:",e); breakdown={strengths:'Error loading.',improvements:'Error loading.'};}} let html=`<h2 class="modal-title" id="detail-modal-title">${avatar} ${this.escapeHTML(person.name)}’s Kingdom ${avatar}</h2>`; html+=`<p class="modal-subtitle">${role.charAt(0).toUpperCase()+role.slice(1)} - ${this.escapeHTML(style)}</p>`; try{const intro=this.getIntroForStyle(style); if(intro)html+=`<p class="modal-intro">${this.escapeHTML(intro)}</p>`;}catch(e){console.error("Error getting intro:",e);} html+=`<section class="goals-section" aria-labelledby="goals-heading-${personId}"><h3 id="goals-heading-${personId}">🎯 Goals & Aspirations</h3><ul id="goal-list-${personId}"></ul><div class="add-goal-form"><input type="text" id="new-goal-text-${personId}" placeholder="Add a new goal..."><button class="add-goal-btn save-btn small-btn" data-person-id="${personId}">+ Add Goal</button></div></section>`; html+=`<section class="breakdown-section" aria-labelledby="breakdown-heading-${personId}"><h3 id="breakdown-heading-${personId}">🌈 Style Insights</h3><div class="style-breakdown modal-breakdown"><div class="strengths"><h4>✨ Powers</h4><div>${breakdown.strengths}</div></div><div class="improvements"><h4>🌟 Quests</h4><div>${breakdown.improvements}</div></div></div></section>`; html+=`<section class="traits-section" aria-labelledby="traits-heading-${personId}"><h3 id="traits-heading-${personId}">🎨 Trait Constellation</h3>`; const roleData=bdsmData[role]; const coreTraits=roleData?.coreTraits||[]; const styleObj=roleData?.styles?.find(s=>s.name===style); const styleTraits=styleObj?.traits||[]; const combinedTraits=[...styleTraits,...coreTraits]; const uniqueTraitDefs=Array.from(new Map(combinedTraits.map(t=>[t.name,t])).values()); html+='<div class="trait-details-grid">'; if(Object.keys(traits).length>0){Object.entries(traits).forEach(([name,score])=>{const traitDef=uniqueTraitDefs.find(t=>t.name===name); const displayName=name.charAt(0).toUpperCase()+name.slice(1); const description=traitDef?.desc?.[score]||"Description N/A"; const flair=this.getFlairForScore(score); const emoji=this.getEmojiForScore(score); html+=`<div class="trait-detail-item"><h4>${this.escapeHTML(displayName)} - Lvl ${score} ${emoji}</h4><p><strong>Vibe:</strong> ${this.escapeHTML(description)}</p><p><em>${flair}</em></p></div>`;});}else{html+=`<p class="muted-text">No trait scores recorded.</p>`;} html+='</div></section>'; html+=`<section class="history-section" aria-labelledby="history-heading-${personId}"><h3 id="history-heading-${personId}">⏳ Growth Over Time <button class="snapshot-info-btn" aria-label="Snapshot Info" aria-expanded="false">ℹ️</button></h3><p class="snapshot-info muted-text" style="display:none;">Snapshots save current traits to track evolution!</p><div class="history-chart-container"><canvas id="history-chart"></canvas></div><button id="snapshot-btn" class="small-btn save-btn" data-person-id="${personId}">📸 Take Snapshot</button></section>`; html+=`<section class="achievements-section" aria-labelledby="achievements-heading-${personId}"><h3 id="achievements-heading-${personId}">🏆 Achievements Unlocked</h3><div id="achievements-list-${personId}"></div></section>`; html+=`<section class="kink-reading-section" aria-labelledby="reading-heading-${personId}"><h3 id="reading-heading-${personId}">🔮 Compass Reading</h3><button id="reading-btn" class="small-btn" data-person-id="${personId}">Get My Reading!</button><div id="kink-reading-output" class="kink-reading-output" style="display:none;" aria-live="polite"></div></section>`; html+=`<section class="reflections-section" aria-labelledby="reflections-heading-${personId}"><h3 id="reflections-heading-${personId}">📝 Journal Reflections</h3><div id="journal-prompt-area" style="display:none;" aria-live="polite"></div><div class="modal-actions"><button id="prompt-btn" class="small-btn" data-person-id="${personId}">💡 New Prompt</button></div><textarea id="reflections-text" class="reflections-textarea" data-person-id="${personId}" rows="7" placeholder="Reflect..." aria-label="Journal Entry">${this.escapeHTML(reflections.text||'')}</textarea><button id="save-reflections-btn" class="save-btn" data-person-id="${personId}">Save Reflection 💭</button></section>`; this.elements.modalBody.innerHTML=html; this.renderGoalList(person); this.renderAchievements(person); this.openModal(this.elements.modal); this.renderHistoryChart(person);}


  // --- New Feature Logic ---
  addGoal(personId){const person=this.people.find(p=>p.id===personId);const inputElement=this.elements.modalBody?.querySelector(`#new-goal-text-${personId}`);if(!person||!inputElement)return;const text=inputElement.value.trim();if(!text){this.showNotification("Goal text cannot be empty.","error");return;}const newGoal={id:Date.now(),text:text,status:'todo',createdAt:Date.now()};person.goals=person.goals||[];person.goals.push(newGoal);grantAchievement(person,'goal_added');this.saveToLocalStorage();this.renderGoalList(person);inputElement.value='';inputElement.focus();}
  toggleGoalStatus(personId,goalId){const person=this.people.find(p=>p.id===personId);const goal=person?.goals?.find(g=>g.id===goalId);if(!goal)return;goal.status=(goal.status==='done'?'todo':'done');if(goal.status==='done'){goal.completedAt=Date.now();grantAchievement(person,'goal_completed');const completedCount=person.goals.filter(g=>g.status==='done').length;if(completedCount>=5)grantAchievement(person,'five_goals_completed');}else{delete goal.completedAt;}this.saveToLocalStorage();this.renderGoalList(person);}
  deleteGoal(personId,goalId){const person=this.people.find(p=>p.id===personId);if(!person)return;if(confirm('🚨 Delete this goal permanently?')){person.goals=person.goals.filter(g=>g.id!==goalId);this.saveToLocalStorage();this.renderGoalList(person);this.showNotification("Goal deleted.","info");}}
  renderGoalList(person){const listElement=this.elements.modalBody?.querySelector(`#goal-list-${person.id}`);if(!listElement)return;const goals=person.goals||[];let htmlString='';if(goals.length>0){goals.sort((a,b)=>(a.status==='done'?1:-1)||(b.createdAt-a.createdAt));goals.forEach(goal=>{htmlString+=`<li class="${goal.status==='done'?'done':''}" data-goal-id="${goal.id}"><span>${this.escapeHTML(goal.text)}</span><span class="goal-actions"><button class="toggle-goal-btn small-btn" data-person-id="${person.id}" data-goal-id="${goal.id}" aria-label="${goal.status==='done'?'Mark as to-do':'Mark as done'}">${goal.status==='done'?'🔄':'✅'}</button><button class="delete-goal-btn small-btn delete-btn" data-person-id="${person.id}" data-goal-id="${goal.id}" aria-label="Delete goal">🗑️</button></span></li>`;});}else{htmlString=`<li class="muted-text">No goals set yet. Add one below!</li>`;}listElement.innerHTML=htmlString;}
  showJournalPrompt(personId){const promptArea=this.elements.modalBody?.querySelector('#journal-prompt-area');const textarea=this.elements.modalBody?.querySelector('#reflections-text');if(promptArea&&textarea){const promptText=getRandomPrompt();promptArea.innerHTML=`<p class="journal-prompt">${this.escapeHTML(promptText)}</p>`;promptArea.style.display='block';textarea.focus();const person = this.people.find(p => p.id === personId); if(person) grantAchievement(person,'prompt_used'); this.saveToLocalStorage();}}
  saveReflections(personId){const person=this.people.find(p=>p.id===personId);const textarea=this.elements.modalBody?.querySelector('#reflections-text');if(!person||!textarea){this.showNotification("Error saving reflection.","error");return;}const text=textarea.value;if(!person.reflections)person.reflections={};person.reflections.text=text;person.reflections.lastUpdated=Date.now();let newlySaved=false;if(text.trim().length>0){newlySaved=grantAchievement(person,'reflection_saved');}const reflectionCount=this.people.reduce((count,p)=>{return count+(p.reflections?.text?.trim().length>0?1:0);},0);if(reflectionCount>=5)grantAchievement(person,'five_reflections');this.saveToLocalStorage();const button=this.elements.modalBody.querySelector('#save-reflections-btn');if(button){button.textContent='Saved ✓';button.disabled=true;setTimeout(()=>{button.textContent='Save Reflection 💭';button.disabled=false;},2000);}else{this.showNotification("Reflection Saved! ✨","success");}}
  addSnapshotToHistory(personId){const person=this.people.find(p=>p.id===personId);if(!person||!person.traits||Object.keys(person.traits).length===0){this.showNotification("Cannot take snapshot: No traits recorded yet.","error");return;}const snapshot={date:Date.now(),traits:{...person.traits},style:person.style};person.history=person.history||[];person.history.push(snapshot);grantAchievement(person,'history_snapshot');if(person.history.length>=10)grantAchievement(person,'ten_snapshots');this.saveToLocalStorage();this.showNotification("Snapshot saved! 📸","success");this.renderHistoryChart(person);this.renderAchievements(person);}
  renderHistoryChart(person){const container=this.elements.modalBody?.querySelector('.history-chart-container');const canvas=container?.querySelector('#history-chart');if(this.chartInstance){this.chartInstance.destroy();this.chartInstance=null;}if(!container){console.error("Chart container not found");return;}if(!canvas){container.innerHTML=`<p>Error: Chart canvas element missing.</p>`;return;}const history=person.history||[];if(history.length===0){container.innerHTML=`<p class="muted-text">No history snapshots yet!</p>`;return;}if(container.querySelector('p')){container.innerHTML=`<canvas id="history-chart"></canvas>`;}const ctx=container.querySelector('#history-chart').getContext('2d');const labels=history.map(s=>new Date(s.date).toLocaleDateString());const allTraitNames=new Set();history.forEach(s=>Object.keys(s.traits).forEach(name=>allTraitNames.add(name)));if(person.traits)Object.keys(person.traits).forEach(name=>allTraitNames.add(name));const datasets=[];const colors=['#ff69b4','#8a5a6d','#a0d8ef','#dcc1ff','#ff85cb','#4a2c3d','#f4d4e4','#c49db1'];let colorIndex=0;allTraitNames.forEach(traitName=>{const data=history.map(s=>s.traits[traitName]!==undefined?parseInt(s.traits[traitName],10):null);const color=colors[colorIndex%colors.length];datasets.push({label:traitName.charAt(0).toUpperCase()+traitName.slice(1),data:data,borderColor:color,backgroundColor:color+'80',tension:0.1,fill:false,spanGaps:true,pointRadius:4,pointHoverRadius:6});colorIndex++;});const isDark=document.body.getAttribute('data-theme')==='dark'||document.body.getAttribute('data-theme')==='velvet';const gridColor=isDark?'rgba(244, 212, 228, 0.15)':'rgba(74, 44, 61, 0.1)';const labelColor=isDark?'#c49db1':'#8a5a6d';this.chartInstance=new Chart(ctx,{type:'line',data:{labels:labels,datasets:datasets},options:{responsive:true,maintainAspectRatio:false,plugins:{legend:{position:'bottom',labels:{color:labelColor,boxWidth:12,padding:15}},tooltip:{mode:'index',intersect:false,backgroundColor:isDark?'rgba(255,255,255,0.9)':'rgba(0,0,0,0.8)',titleColor:isDark?'#000':'#fff',bodyColor:isDark?'#000':'#fff',borderColor:isDark?'#ccc':'#333',borderWidth:1}},scales:{y:{min:1,max:5,ticks:{stepSize:1,color:labelColor},grid:{color:gridColor}},x:{ticks:{color:labelColor},grid:{color:gridColor}}}}});}
  toggleSnapshotInfo(button){const infoPanel=button.closest('.history-section')?.querySelector('.snapshot-info');if(infoPanel){const isHidden=infoPanel.style.display==='none';infoPanel.style.display=isHidden?'block':'none';button.setAttribute('aria-expanded',isHidden);}}
  renderAchievements(person){const listElement=this.elements.modalBody?.querySelector(`#achievements-list-${person.id}`);if(!listElement)return;const achievements=person.achievements||[];let htmlString='';if(achievements.length>0){htmlString+=`<ul>`;achievements.forEach(id=>{const details=achievementList[id];if(details){const icon=details.name.match(/([\p{Emoji}\p{Emoji_Modifier}\p{Emoji_Component}\p{Emoji_Presentation}\p{Emoji_Modifier_Base}]+)/u)?.[0]||'🏆';htmlString+=`<li title="${this.escapeHTML(details.desc)}"><span class="achievement-icon">${icon}</span><span class="achievement-name">${this.escapeHTML(details.name)}</span></li>`;}});htmlString+=`</ul>`;}else{htmlString=`<p class="muted-text">No achievements unlocked yet!</p>`;}listElement.innerHTML=htmlString;}
  showKinkReading(personId){const person=this.people.find(p=>p.id===personId);const outputElement=this.elements.modalBody?.querySelector('#kink-reading-output');if(!person||!outputElement)return;grantAchievement(person,'kink_reading');this.saveToLocalStorage();this.renderAchievements(person);let reading=`🔮 ${this.escapeHTML(person.name)}'s Kink Compass Reading 🔮\n\nEmbracing the path of a **${this.escapeHTML(person.style)} ${person.role}**, your journey unfolds with unique sparkles!\n\n`;const traits=person.traits||{};const sortedTraits=Object.entries(traits).map(([name,score])=>({name,score:parseInt(score,10)})).sort((a,b)=>b.score-a.score);if(sortedTraits.length>0){const highest=sortedTraits[0];const lowest=sortedTraits[sortedTraits.length-1];const coreTrait1=bdsmData[person.role]?.coreTraits?.[0]?.name;const coreTrait2=bdsmData[person.role]?.coreTraits?.[1]?.name;reading+=`✨ Your current North Star appears to be **${highest.name} (Lvl ${highest.score})**: ${this.getReadingDescriptor(highest.name,highest.score)}.\n\n`;if(coreTrait1&&traits[coreTrait1]!==undefined){reading+=`🧭 Core Compass Point - **${coreTrait1} (Lvl ${traits[coreTrait1]})**: Reflects ${this.getReadingDescriptor(coreTrait1,traits[coreTrait1])}.\n`;}if(coreTrait2&&traits[coreTrait2]!==undefined){reading+=`🧭 Core Compass Point - **${coreTrait2} (Lvl ${traits[coreTrait2]})**: Resonates with ${this.getReadingDescriptor(coreTrait2,traits[coreTrait2])}.\n`;}if(sortedTraits.length>1&&highest.score!==lowest.score){reading+=`\n🌱 An area ripe for exploration or growth might be **${lowest.name} (Lvl ${lowest.score})**: Consider exploring aspects of ${this.getReadingDescriptor(lowest.name,lowest.score)}.\n`;}}else{reading+=`Your trait map is currently uncharted! Explore the sliders to define your path.\n`;}reading+=`\n💖 Remember, the essence of being a ${this.escapeHTML(person.style)} is about **${this.getStyleEssence(person.style)}**. Continue exploring authentically!\n`;outputElement.textContent=reading;outputElement.style.display='block';outputElement.focus();}
  getReadingDescriptor(traitName,score){score=parseInt(score,10); const highThreshold=4; const lowThreshold=2; const baseDescriptions={'obedience':'following guidance','trust':'opening up','service':'helping others','presentation':'how you appear','playful defiance':'pushing boundaries','mischief':'causing playful trouble','devotion':'deep loyalty','surrender':'letting go of control','affection seeking':'desiring closeness','playfulness':'engaging in fun','non-verbal expression':'communicating without words','age regression comfort':"embracing a younger mindset",'need for guidance':'relying on structure','boundless energy':'enthusiasm','trainability':'learning quickly','curiosity':'investigating','gracefulness':'poise','desire for pampering':'being spoiled','delegation tendency':'letting others help','rope enthusiasm':'enjoying bonds','patience during tying':'stillness','pain interpretation':'processing sensation','sensation seeking':'craving intensity','enjoyment of chase':'the thrill of pursuit','fear play comfort':'flirting with vulnerability','objectification comfort':'being a focus','responsiveness to control':'adapting to direction','aesthetic focus':'visual appeal','stillness / passivity':'calm inaction','shyness / skittishness':'gentle caution','gentle affection need':'soft interactions','task focus':'completing duties','anticipating needs':'proactive help','enthusiasm for games':'loving play','good sport':'playing fairly','vulnerability expression':'showing softness','coquettishness':'playful charm','struggle performance':'acting resistant','acceptance of fate':'inner yielding','mental focus':'deep concentration','suggestibility':'openness to influence','responsiveness to direction':'following commands','passivity in control':'waiting for direction','attention to detail':'precision','uniformity':'embracing attire','pain seeking':'desiring intensity','endurance display':'showing toughness','receptivity':'openness to receiving','power exchange focus':'enjoying the dynamic','authority':'taking charge','care':'nurturing others','leadership':'guiding','control':'managing details','direct communication':'clarity','boundary setting':'defining limits','emotional support':'comforting others','patience':'calm guidance','rule enforcement':'maintaining order','discipline focus':'using consequences','expectation setting':'defining standards','presence':'commanding aura','protective guidance':'fatherly care','affectionate authority':'warm firmness','nurturing comfort':'motherly care','gentle discipline':'kind correction','possessiveness':'claiming','behavioral training':'shaping actions','rope technique':'skill with knots','aesthetic vision':'visual artistry','sensation control':'precise delivery','psychological focus':"observing reactions",'pursuit drive':'instinct to chase','instinct reliance':'acting on gut feeling','skill development focus':'teaching ability','structured methodology':'using clear steps','fine motor control':'precise direction','objectification gaze':'viewing as object','vigilance':'watchfulness','defensive instinct':'shielding others','consequence delivery':'administering punishment','detachment during discipline':'objectivity','holistic well-being focus':'overall care','rule implementation for safety':'practical structure','formal demeanor':'respectful authority','service expectation':'requiring respect','worship seeking':'desiring adoration','effortless command':'innate authority','strategic direction':'planning actions','decisiveness':'firm choices',}; const defaultDesc=traitName; if(score>=highThreshold){return`a strong affinity for ${baseDescriptions[traitName]||defaultDesc}`;}else if(score<=lowThreshold){return`potential hesitation or less focus on ${baseDescriptions[traitName]||defaultDesc}`;}else{return`a balanced approach to ${baseDescriptions[traitName]||defaultDesc}`;}}
  getStyleEssence(styleName){const essences={'Classic Submissive':'trust and willingness','Brat':'playful challenge and connection','Slave':'profound devotion and service','Pet':'affectionate loyalty and play','Little':'innocent joy and secure dependence','Puppy':'boundless enthusiasm and eagerness to please','Kitten':'curious grace and affectionate independence','Princess':'being cherished and adored','Rope Bunny':'aesthetic surrender and sensation','Masochist':'transcending limits through sensation','Prey':'the exhilarating dance of pursuit','Toy':'delighting in being used and responsive','Doll':'embodying curated perfection and passivity','Bunny':'gentle connection and soft vulnerability','Servant':'finding purpose in meticulous duty','Playmate':'shared joy and adventurous fun','Babygirl':'charming vulnerability and needing care','Captive':'the dramatic tension of capture and surrender','Thrall':'deep mental connection and yielding','Puppet':'responsive surrender to direct control','Maid':'order, presentation, and respectful service','Painslut':'boldly embracing and seeking intensity','Bottom':'receptive strength and power exchange','Classic Dominant':'confident guidance and responsibility','Assertive':'clear communication and setting direction','Nurturer':'compassionate support and fostering growth','Strict':'structure, order, and clear expectations','Master':'profound authority and shaping potential','Mistress':'elegant command and creative control','Daddy':'protective guidance and affectionate firmness','Mommy':'warm nurturing and gentle structure','Owner':'possessive care and shaping behavior','Rigger':'the artful application of restraint','Sadist':'the controlled exploration of sensation','Hunter':'the primal thrill of the chase','Trainer':'patiently cultivating skills and discipline','Puppeteer':'precise control and creative direction','Protector':'steadfast vigilance and ensuring safety','Disciplinarian':'fair correction and maintaining standards','Caretaker':'holistic well-being and providing comfort','Sir':'dignified authority and earned respect','Goddess':'inspiring worship through presence','Commander':'strategic leadership and decisive action','Switch': 'versatility and dynamic flow'}; const key=styleName?.replace(/\(.*?\)/g,'').trim()||''; return essences[key]||`your unique expression`;}
  showGlossary(){if(!this.elements.glossaryBody)return;grantAchievement({},'glossary_user');let html='<dl>';Object.entries(glossaryTerms).sort((a,b)=>a[1].term.localeCompare(b[1].term)).forEach(([key,termData])=>{html+=`<dt id="gloss-term-${key}">${this.escapeHTML(termData.term)}</dt><dd>${this.escapeHTML(termData.definition)}`;if(termData.related?.length){html+=`<br><span class="related-terms">See also: `;html+=termData.related.map(relKey=>`<a href="#gloss-term-${relKey}">${glossaryTerms[relKey]?.term||relKey}</a>`).join(', ');html+=`</span>`;}html+=`</dd>`;});html+='</dl>';this.elements.glossaryBody.innerHTML=html;this.openModal(this.elements.glossaryModal);}
  showStyleDiscovery(){grantAchievement({},'style_explorer');this.renderStyleDiscoveryContent();this.openModal(this.elements.styleDiscoveryModal);}
  renderStyleDiscoveryContent(){const container=this.elements.styleDiscoveryBody;const roleFilter=this.elements.styleDiscoveryRoleFilter;if(!container||!roleFilter)return;const selectedRole=roleFilter.value;let htmlString='';const rolesToShow=selectedRole==='all'?['submissive','dominant','switch']: [selectedRole];rolesToShow.forEach(roleKey=>{const roleData=bdsmData[roleKey];if(roleData&&roleData.styles?.length>0){htmlString+=`<h3>${roleData.roleName||roleKey.charAt(0).toUpperCase()+roleKey.slice(1)} Styles</h3>`;roleData.styles.forEach(style=>{htmlString+=`<div class="style-discovery-item"><h4>${this.escapeHTML(style.name)}</h4>`;if(style.summary)htmlString+=`<p><em>${this.escapeHTML(style.summary)}</em></p>`;const traits=style.traits||roleData.coreTraits||[];if(traits.length>0){htmlString+=`<strong>Key Traits:</strong><ul>`;traits.forEach(trait=>{htmlString+=`<li>${this.escapeHTML(trait.name.charAt(0).toUpperCase()+trait.name.slice(1))}</li>`;});htmlString+=`</ul>`;}else{htmlString+=`<p class="muted-text">Trait details not specified.</p>`;}htmlString+=`</div>`;});}else{if(selectedRole!=='all')htmlString+=`<p>No specific styles defined yet for role: ${roleKey}</p>`;}});container.innerHTML=htmlString||'<p>Select a role or check data definitions.</p>';}
  setTheme(themeName){document.body.setAttribute('data-theme',themeName);const isDark=themeName==='dark'||themeName==='velvet';if(this.elements.themeToggle){this.elements.themeToggle.textContent=isDark?'☀️':'🌙';this.elements.themeToggle.setAttribute('title',`Switch to ${isDark?'Light':'Dark'} Mode`);}try{localStorage.setItem('kinkCompassTheme',themeName);}catch(e){console.warn("Failed to save theme:",e);}if(this.chartInstance&&this.currentEditId){const person=this.people.find(p=>p.id===this.currentEditId);if(person)this.renderHistoryChart(person);}}
  applySavedTheme(){let savedTheme='light';try{if(typeof localStorage!=='undefined')savedTheme=localStorage.getItem('kinkCompassTheme')||'light';}catch(e){console.warn("Failed to read saved theme:",e);}this.setTheme(savedTheme);console.log(`Applied saved theme: ${savedTheme}`);}
  toggleTheme(){const currentTheme=document.body.getAttribute('data-theme')||'light';const isCurrentlyDark=currentTheme==='dark'||currentTheme==='velvet';this.setTheme(isCurrentlyDark?'light':'dark');}
  exportData(){if(this.people.length===0){this.showNotification("No personas to export!","info");return;}try{const dataString=JSON.stringify(this.people,null,2);const blob=new Blob([dataString],{type:"application/json"});const url=URL.createObjectURL(blob);const anchor=document.createElement('a');anchor.href=url;anchor.download=`kinkcompass_personas_${new Date().toISOString().slice(0,10)}.json`;anchor.click();URL.revokeObjectURL(url);grantAchievement({},'data_exported');this.showNotification("Data exported successfully!","success");anchor.remove();}catch(e){console.error("Export failed:",e);this.showNotification("Export failed.","error");}}
  importData(event){const file=event.target.files?.[0];if(!file){return;}if(file.type!=="application/json"){this.showNotification("Import failed: File must be JSON.","error");event.target.value=null;return;}const reader=new FileReader();reader.onload=(e)=>{try{const importedData=JSON.parse(e.target.result);if(!Array.isArray(importedData)){throw new Error("Invalid format: Not an array.");}const validatedData=importedData.map(p=>({...p,id:p.id??Date.now(),name:p.name??"Unnamed",role:p.role??"submissive",style:p.style??"",avatar:p.avatar||'❓',goals:Array.isArray(p.goals)?p.goals:[],history:Array.isArray(p.history)?p.history:[],achievements:Array.isArray(p.achievements)?p.achievements:[],reflections:typeof p.reflections==='object'&&p.reflections!==null?p.reflections:{text:p.reflections||''},traits:typeof p.traits==='object'&&p.traits!==null?p.traits:{}}));if(confirm(`Import ${validatedData.length} personas? This will OVERWRITE your current ${this.people.length} personas.`)){this.people=validatedData;this.saveToLocalStorage();this.renderList();this.resetForm();this.showNotification(`Imported ${this.people.length} personas.`,"success");grantAchievement({},'data_imported');}}catch(err){console.error("Import failed:",err);this.showNotification(`Import failed: ${err.message}`,"error");}finally{event.target.value=null;}};reader.onerror=()=>{this.showNotification("Error reading file.","error");event.target.value=null;};reader.readAsText(file);}
  showTraitInfo(traitName){const roleKey=this.elements.role.value; const styleName=this.elements.style.value; const roleData=bdsmData[roleKey]; let traitDef=null; if(roleData){if(styleName){const styleObj=roleData.styles?.find(s=>s.name===styleName); traitDef=styleObj?.traits?.find(t=>t.name===traitName);} if(!traitDef)traitDef=roleData.coreTraits?.find(t=>t.name===traitName); if(!traitDef&&roleKey==='switch')traitDef=bdsmData.switch?.coreTraits?.find(t=>t.name===traitName);} if(traitDef&&this.elements.traitInfoPopup&&this.elements.traitInfoTitle&&this.elements.traitInfoBody){const title=traitName.charAt(0).toUpperCase()+traitName.slice(1); this.elements.traitInfoTitle.textContent=`${this.getEmojiForScore(3)} ${title} Levels Explained`; let bodyHtml=''; for(let i=1;i<=5;i++){const score=String(i); const description=traitDef.desc?.[score]||`(No description for Level ${score})`; const emoji=this.getEmojiForScore(score); bodyHtml+=`<p><strong>${emoji} Level ${score}:</strong> ${this.escapeHTML(description)}</p>`;} this.elements.traitInfoBody.innerHTML=bodyHtml; this.elements.traitInfoPopup.style.display='block'; this.elements.traitInfoPopup.setAttribute('aria-hidden','false'); this.elements.traitInfoClose?.focus(); this.elements.traitInfoPopup.scrollIntoView({behavior:'smooth',block:'nearest'});}else{console.warn(`Could not find trait definition or popup elements for '${traitName}'`); this.hideTraitInfo();}}
  hideTraitInfo(){if(this.elements.traitInfoPopup){this.elements.traitInfoPopup.style.display='none'; this.elements.traitInfoPopup.setAttribute('aria-hidden','true');}}

  // --- Style Finder Methods ---
  sfStart(){this.sfActive=true; this.sfStep=0; this.sfRole=null; this.sfAnswers={traits:{}}; this.sfScores={}; this.sfHasRenderedDashboard=false; this.sfPreviousScores={}; this.sfTraitSet=[]; this.sfSteps=[]; if(this.elements.sfDashboard)this.elements.sfDashboard.style.display='none'; if(this.elements.sfFeedback)this.elements.sfFeedback.textContent=''; if(!this.elements.sfStepContent){console.error("SF step content element missing!"); alert("Error starting Style Finder."); return;} this.openModal(this.elements.sfModal); this.sfRenderStep(); this.sfShowFeedback("Let’s begin your journey!"); grantAchievement({},'style_finder_complete');}
  sfClose(){this.sfActive=false; this.closeModal(this.elements.sfModal); console.log("Style Finder closed.");}
  sfCalculateSteps(){this.sfSteps=[]; this.sfSteps.push({type:'welcome'}); this.sfSteps.push({type:'role'}); if(this.sfRole){const baseTraitSet=(this.sfRole==='dominant'?this.sfDomFinderTraits:this.sfSubFinderTraits); if(this.sfTraitSet.length===0){this.sfTraitSet=[...baseTraitSet].sort(()=>0.5-Math.random());} this.sfTraitSet.forEach(trait=>this.sfSteps.push({type:'trait',trait:trait.name})); this.sfSteps.push({type:'roundSummary',round:'Traits'});} this.sfSteps.push({type:'result'});}
  sfRenderStep(){if(!this.sfActive||!this.elements.sfStepContent)return; this.sfCalculateSteps(); if(this.sfStep<0||this.sfStep>=this.sfSteps.length){console.error(`Invalid SF step index: ${this.sfStep}. Resetting.`); this.sfStep=0; this.sfCalculateSteps(); if(this.sfSteps.length===0){this.elements.sfStepContent.innerHTML="<p>Error calculating steps.</p>"; return;}} const step=this.sfSteps[this.sfStep]; if(!step){console.error(`No step data for index ${this.sfStep}`); this.elements.sfStepContent.innerHTML="<p>Error loading step.</p>"; return;} console.log(`Rendering SF Step ${this.sfStep}:`,step); let html=""; const progressTracker=this.elements.sfProgressTracker; if(step.type==='trait'&&this.sfRole&&this.sfTraitSet.length>0){const currentTraitIndex=this.sfTraitSet.findIndex(t=>t.name===step.trait); if(currentTraitIndex!==-1&&progressTracker){const questionsLeft=this.sfTraitSet.length-(currentTraitIndex+1); progressTracker.style.display='block'; progressTracker.textContent=`Trait ${currentTraitIndex+1} / ${this.sfTraitSet.length} (${questionsLeft} more!)`;}else{if(progressTracker)progressTracker.style.display='none'; console.warn(`Trait '${step.trait}' not found for progress.`);}}else{if(progressTracker)progressTracker.style.display='none';} switch(step.type){case 'welcome':html=`<h2>Welcome, Brave Explorer!</h2><p>Dive into a quest to find your BDSM style!</p><button data-action="next">Start the Journey! ✨</button>`; break; case 'role':html=`<h2>Pick Your Path!</h2><p>Do you feel more drawn to guiding (Dominant) or following (Submissive)?</p><button data-action="setRole" data-role="dominant">Guiding! (Dominant)</button><button data-action="setRole" data-role="submissive">Following! (Submissive)</button>`; break; case 'trait':const traitObj=this.sfTraitSet.find(t=>t.name===step.trait); if(!traitObj){html=`<p>Error loading trait: ${step.trait}.</p> <button data-action="prev">Back</button>`; break;} const currentValue=this.sfAnswers.traits[traitObj.name]??5; const footnoteSet=(this.sfRole==='dominant'?this.sfDomTraitFootnotes:this.sfSubTraitFootnotes); const footnote=footnoteSet[traitObj.name]||"1: Least / 10: Most"; const isFirstTraitStep=this.sfSteps.findIndex(s=>s.type==='trait')===this.sfStep; const sliderDescArray=this.sfSliderDescriptions?.[traitObj.name]??[]; const safeCurrentValue=Number(currentValue); let sliderDescText=`Level ${safeCurrentValue}`; const safeIndex=safeCurrentValue-1; if(safeIndex>=0&&safeIndex<sliderDescArray.length){sliderDescText=sliderDescArray[safeIndex];}else{console.warn(`Slider desc OOB for '${traitObj.name}' at ${safeCurrentValue}`);} html=`<h2>${this.escapeHTML(traitObj.desc)}<button class="sf-info-icon" data-trait="${traitObj.name}" data-action="showTraitInfo" aria-label="More info about ${traitObj.name}">ℹ️</button></h2> ${isFirstTraitStep?'<p>Slide to find your vibe! (1 = Not Me, 10 = Totally Me)</p>':''} <input type="range" min="1" max="10" value="${safeCurrentValue}" class="sf-trait-slider" data-trait="${traitObj.name}" aria-label="${traitObj.name} rating"> <div id="sf-desc-${traitObj.name}" class="sf-slider-description">${this.escapeHTML(sliderDescText)}</div> <p class="sf-slider-footnote">${this.escapeHTML(footnote)}</p> <div style="margin-top: 15px;"> <button data-action="next" data-trait="${traitObj.name}">Next Step!</button> ${this.sfStep>1?`<button data-action="prev" style="margin-left: 10px;">Back</button>`:''} </div>`; break; case 'roundSummary':html=`<h2>${step.round} Check-In!</h2><p>Here’s how your choices are shaping up:</p><div id="sf-summary-dashboard-placeholder">Loading Dashboard...</div><button data-action="next">See Top Style!</button><button data-action="prev" style="margin-left: 10px;">Back</button>`; requestAnimationFrame(()=>this.sfUpdateDashboard(true)); break; case 'result':this.sfCalculateResult(); const sortedScores=Object.entries(this.sfScores).sort((a,b)=>b[1]-a[1]); if(sortedScores.length===0||!sortedScores[0]||sortedScores[0][1]<=0){html=`<div class="sf-result-section sf-fade-in"><h2 class="sf-result-heading">Hmm... 🤔</h2><p>Not enough data or unique responses to determine a top style yet. Your vibe is uniquely you!</p><div class="sf-result-buttons"><button data-action="startOver">Try Again?</button><button data-action="close">Close</button></div></div>`; break;} const topStyle=sortedScores[0][0]; const matchData=this.sfDynamicMatches[topStyle]||{dynamic:"Unique",match:"Explorer",desc:"Find your perfect match!",longDesc:"Explore dynamics that resonate!"}; const descData=this.sfStyleDescriptions[topStyle]||{short:"A unique blend!",long:"Your combination of traits creates a special style.",tips:["Keep exploring!","Communicate your desires."]}; html=`<div class="sf-result-section sf-fade-in"><h2 class="sf-result-heading">🎉 Your Top BDSM Style: ${this.escapeHTML(topStyle)} 🎉</h2><p><strong>${this.escapeHTML(descData.short)}</strong></p><p>${this.escapeHTML(descData.long)}</p><h3>Potential Dynamic Match: ${this.escapeHTML(matchData.match)}</h3><p><em>${this.escapeHTML(matchData.dynamic)}</em> - ${this.escapeHTML(matchData.desc)}</p><p>${this.escapeHTML(matchData.longDesc)}</p><h3>Tips for You:</h3><ul style="text-align: left; margin: 10px auto; max-width: 350px; list-style: '✨ '; padding-left: 1.5em;">${descData.tips.map(tip=>`<li>${this.escapeHTML(tip)}</li>`).join('')}</ul><div class="sf-result-buttons"><button data-action="applyStyle" data-role="${this.sfRole}" data-style="${this.escapeHTML(topStyle)}">📝 Track This Style!</button><button data-action="startOver">Try Again?</button><button data-action="showFullDetails" data-style="${this.escapeHTML(topStyle)}">More Details</button><button data-action="close">Close</button></div></div>`; if(window.confetti){setTimeout(()=>confetti({particleCount:150,spread:80,origin:{y:0.6},colors:['#ff69b4','#ff85cb','#f4d4e4','#fff','#a0d8ef','#dcc1ff']}),300);} break; default:html="<p>Oops! Something went wrong.</p> <button data-action='prev'>Back</button>";} try{if(!this.elements.sfStepContent)throw new Error("sfStepContent element missing"); this.elements.sfStepContent.innerHTML=html; if(step.type==='trait'){this.sfUpdateDashboard();}else if(step.type!=='roundSummary'){if(this.elements.sfDashboard)this.elements.sfDashboard.style.display='none';} console.log(`SF Step ${this.sfStep} rendered successfully.`);}catch(e){console.error(`Render SF Step ${this.sfStep} Error:`,e); if(this.elements.sfStepContent){this.elements.sfStepContent.innerHTML=`<p>Error rendering step.</p> <button data-action="prev">Back</button>`;}}} // End sfRenderStep
  sfSetRole(role){this.sfRole=role; this.sfAnswers.role=role; this.sfAnswers.traits={}; this.sfScores={}; this.sfPreviousScores={}; this.sfHasRenderedDashboard=false; this.sfTraitSet=[]; this.sfSteps=[]; this.sfNextStep();}
  sfSetTrait(trait,value){this.sfAnswers.traits[trait]=parseInt(value,10); this.sfShowFeedback(`You vibe with ${trait} at ${value}!`);}
  sfNextStep(){this.sfStep++; this.sfRenderStep();}
  sfPrevStep(){if(this.sfStep>0){const stepWeAreLeaving=this.sfSteps[this.sfStep]; this.sfStep--; if(stepWeAreLeaving?.type==='result'||stepWeAreLeaving?.type==='roundSummary'){console.log("Moving back, resetting scores."); this.sfScores={}; this.sfPreviousScores={}; this.sfHasRenderedDashboard=false;} this.sfRenderStep();}}
  sfStartOver(){this.sfStep=0; this.sfRole=null; this.sfAnswers={traits:{}}; this.sfScores={}; this.sfPreviousScores={}; this.sfHasRenderedDashboard=false; this.sfTraitSet=[]; this.sfSteps=[]; if(this.elements.sfDashboard)this.elements.sfDashboard.style.display='none'; this.sfRenderStep(); this.sfShowFeedback("Fresh start—here we go!");}
  sfComputeScores(){let scores={}; if(!this.sfRole||!this.sfStyles[this.sfRole])return scores; const roleStyles=this.sfStyles[this.sfRole]; roleStyles.forEach(style=>{scores[style]=0;}); Object.keys(this.sfAnswers.traits).forEach(trait=>{const rating=this.sfAnswers.traits[trait]??0; roleStyles.forEach(style=>{const keyTraits=this.sfStyleKeyTraits[style]||[]; if(keyTraits.includes(trait)){scores[style]+=rating*1.5;}});}); return scores;}
  sfUpdateDashboard(forceVisible=false){if(!this.sfSteps||this.sfSteps.length===0)this.sfCalculateSteps(); const currentStepType=this.sfSteps[this.sfStep]?.type; const shouldShowDashboard=forceVisible||(this.sfRole&&currentStepType==='trait'); if(!this.elements.sfDashboard){console.error("Dashboard element missing!"); return;} if(!shouldShowDashboard){this.elements.sfDashboard.style.display='none'; return;} this.elements.sfDashboard.style.display='block'; const scores=this.sfComputeScores(); const sortedScores=Object.entries(scores).filter(([_,score])=>score>0.1).sort((a,b)=>b[1]-a[1]).slice(0,7); let dashboardHTML="<div class='sf-dashboard-header'>✨ Your Live Vibes! ✨</div>"; if(sortedScores.length===0){dashboardHTML+="<p class='muted-text' style='padding: 10px;'>Keep rating traits!</p>";}else{const previousPositions={}; if(this.sfPreviousScores){Object.entries(this.sfPreviousScores).filter(([_,score])=>score>0.1).sort((a,b)=>b[1]-a[1]).forEach(([style,_],index)=>{previousPositions[style]=index;});} const isFirstRender=!this.sfHasRenderedDashboard; const styleIcons=this.getStyleIcons(); sortedScores.forEach(([style,score],index)=>{const prevPos=previousPositions[style]??index; const movement=prevPos-index; let moveIndicator=''; if(!isFirstRender&&movement>0)moveIndicator='<span class="sf-move-up">↑</span>'; else if(!isFirstRender&&movement<0)moveIndicator='<span class="sf-move-down">↓</span>'; const prevScore=this.sfPreviousScores?(this.sfPreviousScores[style]||0):0; const delta=score-prevScore; let deltaDisplay=''; if(!isFirstRender&&Math.abs(delta)>0.1){deltaDisplay=`<span class="sf-score-delta ${delta>0?'positive':'negative'}">${delta>0?'+':''}${delta.toFixed(1)}</span>`;} const animationClass=isFirstRender?'sf-fade-in':''; dashboardHTML+=`<div class="sf-dashboard-item ${animationClass}"><span class="sf-style-name">${styleIcons[style]||'🌟'} ${this.escapeHTML(style)}</span><span class="sf-dashboard-score">${score.toFixed(1)} ${deltaDisplay} ${moveIndicator}</span></div>`;});} this.elements.sfDashboard.innerHTML=dashboardHTML; this.sfPreviousScores={...scores}; this.sfHasRenderedDashboard=true;}
  sfCalculateResult(){this.sfScores=this.sfComputeScores(); const totalAnswers=Object.keys(this.sfAnswers.traits).length; if(totalAnswers===0)return; console.log("Final Scores Calculated:",this.sfScores);}
  sfShowFeedback(message){if(!this.elements.sfFeedback)return; this.elements.sfFeedback.textContent=this.escapeHTML(message); this.elements.sfFeedback.classList.remove('sf-feedback-animation'); void this.elements.sfFeedback.offsetWidth; this.elements.sfFeedback.classList.add('sf-feedback-animation');}
  sfShowTraitInfo(traitName){if(!traitName){console.error("Cannot show trait info: traitName missing."); return;} const explanation=this.sfTraitExplanations[traitName]||"No extra info available."; const popup=document.createElement('div'); popup.className='sf-style-info-popup'; popup.innerHTML=`<h3>${this.escapeHTML(traitName.charAt(0).toUpperCase()+traitName.slice(1))}</h3><p>${this.escapeHTML(explanation)}</p><button class="sf-close-btn" aria-label="Close trait info">×</button>`; document.body.appendChild(popup); popup.querySelector('.sf-close-btn')?.focus();}
  sfSho
